import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;

public enum Spells {
	ACID_SPLASH(0, School.CONJURATION), 
	AID(2, School.ABJURATION), 
	ALARM(1, School.ABJURATION), 
	ALTER_SELF(2, School.TRANSMUTATION), 
	ANIMAL_FRIENDSHIP(1, School.ENCHANTMENT), 
	ANIMAL_MESSENGER(2, School.ENCHANTMENT), 
	ANIMAL_SHAPES(8, School.TRANSMUTATION), 
	ANIMATE_DEAD(3, School.NECROMANCY), 
	ANIMATE_OBJECTS(5, School.TRANSMUTATION), 
	ANTILIFE_SHELL(5, School.ABJURATION), 
	ANTIMAGIC_FIELD(8, School.ABJURATION), 
	ANTIPATHY_SYMPATHY(8, School.ENCHANTMENT), 
	ARCANE_EYE(4, School.DIVINATION), 
	ARCANE_GATE(6, School.CONJURATION), 
	ARCANE_LOCK(2, School.ABJURATION), 
	ARMOR_OF_AGATHYS(1, School.ABJURATION), 
	ARMS_OF_HADAR(1, School.CONJURATION), 
	ASTRAL_PROJECTION(9, School.NECROMANCY), 
	AUGURY(2, School.DIVINATION), 
	AURA_OF_LIFE(4, School.ABJURATION), 
	AURA_OF_PURITY(4, School.ABJURATION), 
	AURA_OF_VITALITY(3, School.EVOCATION), 
	AWAKEN(5, School.TRANSMUTATION), 
	BANE(1, School.ENCHANTMENT), 
	BANISHING_SMITE(5, School.ABJURATION), 
	BANISHMENT(4, School.ABJURATION), 
	BARKSKIN(2, School.TRANSMUTATION), 
	BEACON_OF_HOPE(3, School.ABJURATION), 
	BEAST_SENSE(2, School.DIVINATION), 
	BESTOW_CURSE(3, School.NECROMANCY), 
	BIGBYS_HAND(5, School.EVOCATION), 
	BLADE_BARRIER(6, School.EVOCATION), 
	BLADE_WARD(0, School.ABJURATION), 
	BLESS(1, School.ENCHANTMENT), 
	BLIGHT(4, School.NECROMANCY), 
	BLINDING_SMITE(3, School.EVOCATION), 
	BLINDNESS_DEAFNESS(2, School.NECROMANCY), 
	BLINK(3, School.TRANSMUTATION), 
	BLUR(2, School.ILLUSION), 
	BRANDING_SMITE(2, School.EVOCATION), 
	BURNING_HANDS(1, School.EVOCATION), 
	CALL_LIGHTNING(3, School.CONJURATION), 
	CALM_EMOTIONS(2, School.ENCHANTMENT), 
	CHAIN_LIGHTNING(6, School.EVOCATION), 
	CHARM_PERSON(1, School.ENCHANTMENT), 
	CHILL_TOUCH(0, School.NECROMANCY), 
	CHROMATIC_ORB(1, School.EVOCATION), 
	CIRCLE_OF_DEATH(6, School.NECROMANCY), 
	CIRCLE_OF_POWER(5, School.ABJURATION), 
	CLAIRVOYANCE(3, School.DIVINATION), 
	CLONE(8, School.NECROMANCY), 
	CLOUD_OF_DAGGERS(2, School.CONJURATION), 
	CLOUDKILL(5, School.CONJURATION), 
	COLOR_SPRAY(1, School.ILLUSION), 
	COMMAND(1, School.ENCHANTMENT), 
	COMMUNE(5, School.DIVINATION), 
	COMMUNE_WITH_NATURE(5, School.DIVINATION), 
	COMPELLED_DUEL(1, School.ENCHANTMENT), 
	COMPREHEND_LANGUAGES(1, School.DIVINATION), 
	COMPULSION(4, School.ENCHANTMENT), 
	CONE_OF_COLD(5, School.EVOCATION), 
	CONFUSION(4, School.ENCHANTMENT), 
	CONJURE_ANIMALS(3, School.CONJURATION), 
	CONJURE_BARRAGE(3, School.CONJURATION), 
	CONJURE_CELESTIAL(7, School.CONJURATION), 
	CONJURE_ELEMENTAL(5, School.CONJURATION), 
	CONJURE_FEY(6, School.CONJURATION), 
	CONJURE_MINOR_ELEMENTALS(4, School.CONJURATION), 
	CONJURE_VOLLEY(5, School.CONJURATION), 
	CONJURE_WOODLAND_BEINGS(4, School.CONJURATION), 
	CONTACT_OTHER_PLANE(5, School.DIVINATION), 
	CONTAGION(5, School.NECROMANCY), 
	CONTINGENCY(6, School.EVOCATION), 
	CONTINUAL_FLAME(2, School.EVOCATION), 
	CONTROL_WATER(4, School.TRANSMUTATION), 
	CONTROL_WEATHER(8, School.TRANSMUTATION), 
	CORDON_OF_ARROWS(2, School.TRANSMUTATION), 
	COUNTERSPELL(3, School.ABJURATION), 
	CREATE_FOOD_AND_WATER(3, School.CONJURATION), 
	CREATE_OR_DESTROY_WATER(1, School.TRANSMUTATION), 
	CREATE_UNDEAD(6, School.NECROMANCY), 
	CREATION(5, School.ILLUSION), 
	CROWN_OF_MADNESS(2, School.ENCHANTMENT), 
	CRUSADERS_MANTLE(3, School.EVOCATION), 
	CURE_WOUNDS(1, School.EVOCATION), 
	DANCING_LIGHTS(0, School.EVOCATION), 
	DARKNESS(2, School.EVOCATION), 
	DARKVISION(2, School.TRANSMUTATION), 
	DAYLIGHT(3, School.EVOCATION), 
	DEATH_WARD(4, School.ABJURATION), 
	DELAYED_BLAST_FIREBALL(7, School.EVOCATION), 
	DEMIPLANE(8, School.CONJURATION), 
	DESTRUCTIVE_WAVE(5, School.EVOCATION), 
	DETECT_EVIL_AND_GOOD(1, School.DIVINATION), 
	DETECT_MAGIC(1, School.DIVINATION), 
	DETECT_POISON_AND_DISEASE(1, School.DIVINATION), 
	DETECT_THOUGHTS(2, School.DIVINATION), 
	DIMENSION_DOOR(4, School.CONJURATION), 
	DISGUISE_SELF(1, School.ILLUSION), 
	DISINTEGRATE(6, School.TRANSMUTATION), 
	DISPEL_EVIL_AND_GOOD(5, School.ABJURATION), 
	DISPEL_MAGIC(3, School.ABJURATION), 
	DISSONANT_WHISPERS(1, School.ENCHANTMENT), 
	DIVINATION(4, School.DIVINATION), 
	DIVINE_FAVOR(1, School.EVOCATION), 
	DIVINE_WORD(7, School.EVOCATION), 
	DOMINATE_BEAST(4, School.ENCHANTMENT), 
	DOMINATE_MONSTER(8, School.ENCHANTMENT), 
	DOMINATE_PERSON(5, School.ENCHANTMENT), 
	DRAWMIJS_INSTANT_SUMMONS(6, School.CONJURATION), 
	DREAM(5, School.ILLUSION), 
	DRUIDCRAFT(0, School.TRANSMUTATION), 
	EARTHQUAKE(8, School.EVOCATION), 
	ELDRITCH_BLAST(0, School.EVOCATION), 
	ELEMENTAL_WEAPON(3, School.TRANSMUTATION), 
	ENHANCE_ABILITY(2, School.TRANSMUTATION), 
	ENLARGE_REDUCE(2, School.TRANSMUTATION), 
	ENSNARING_STRIKE(1, School.CONJURATION), 
	ENTANGLE(1, School.CONJURATION), 
	ENTHRALL(2, School.ENCHANTMENT), 
	ETHEREALNESS(7, School.TRANSMUTATION), 
	EVARDS_BLACK_TENTACLES(4, School.CONJURATION), 
	EXPEDITIOUS_RETREAT(1, School.TRANSMUTATION), 
	EYEBITE(6, School.NECROMANCY), 
	FABRICATE(4, School.TRANSMUTATION), 
	FAERIE_FIRE(1, School.EVOCATION), 
	FALSE_LIFE(1, School.NECROMANCY), 
	FEAR(3, School.ILLUSION), 
	FEATHER_FALL(1, School.TRANSMUTATION), 
	FEEBLEMIND(8, School.ENCHANTMENT), 
	FEIGN_DEATH(3, School.NECROMANCY), 
	FIND_FAMILIAR(1, School.CONJURATION), 
	FIND_STEED(2, School.CONJURATION), 
	FIND_THE_PATH(6, School.DIVINATION), 
	FIND_TRAPS(2, School.DIVINATION), 
	FINGER_OF_DEATH(7, School.NECROMANCY), 
	FIREBALL(3, School.EVOCATION), 
	FIREBOLT(0, School.EVOCATION), 
	FIRE_SHIELD(4, School.EVOCATION), 
	FIRE_STORM(7, School.EVOCATION), 
	FLAME_BLADE(2, School.EVOCATION), 
	FLAME_STRIKE(5, School.EVOCATION), 
	FLAMING_SPHERE(2, School.CONJURATION), 
	FLESH_TO_STONE(6, School.TRANSMUTATION), 
	FLY(3, School.TRANSMUTATION), 
	FOG_CLOUD(1, School.CONJURATION), 
	FORBIDDANCE(6, School.ABJURATION), 
	FORCECAGE(7, School.EVOCATION), 
	FORESIGHT(9, School.DIVINATION), 
	FREEDOM_OF_MOVEMENT(4, School.ABJURATION), 
	FRIENDS(0, School.ENCHANTMENT), 
	GASEOUS_FORM(3, School.TRANSMUTATION), 
	GATE(9, School.CONJURATION), 
	GEAS(5, School.ENCHANTMENT), 
	GENTLE_REPOSE(2, School.NECROMANCY), 
	GIANT_INSECT(4, School.TRANSMUTATION), 
	GLIBNESS(8, School.TRANSMUTATION), 
	GLOBE_OF_INVULNERABILITY(6, School.ABJURATION), 
	GLYPH_OF_WARDING(3, School.ABJURATION), 
	GOODBERRY(1, School.TRANSMUTATION), 
	GRASPING_VINE(4, School.CONJURATION), 
	GREASE(1, School.CONJURATION), 
	GREATER_INVISIBILITY(4, School.ILLUSION), 
	GREATER_RESTORATION(5, School.ABJURATION), 
	GUARDIAN_OF_FAITH(4, School.CONJURATION), 
	GUARDS_AND_WARDS(6, School.ABJURATION), 
	GUIDANCE(0, School.DIVINATION), 
	GUIDING_BOLT(1, School.EVOCATION), 
	GUST_OF_WIND(2, School.EVOCATION), 
	HAIL_OF_THORNS(1, School.CONJURATION), 
	HALLOW(5, School.EVOCATION), 
	HALLUCINATORY_TERRAIN(4, School.ILLUSION), 
	HARM(6, School.NECROMANCY), 
	HASTE(3, School.TRANSMUTATION), 
	HEAL(6, School.EVOCATION), 
	HEALING_WORD(1, School.EVOCATION), 
	HEAT_METAL(2, School.TRANSMUTATION), 
	HELLISH_REBUKE(1, School.EVOCATION), 
	HEROES_FEAST(6, School.CONJURATION), 
	HEROISM(1, School.ENCHANTMENT), 
	HEX(1, School.ENCHANTMENT), 
	HOLD_MONSTER(5, School.ENCHANTMENT), 
	HOLD_PERSON(2, School.ENCHANTMENT), 
	HOLY_AURA(8, School.ABJURATION), 
	HUNGER_OF_HADAR(3, School.CONJURATION), 
	HUNTERS_MARK(1, School.DIVINATION), 
	HYPNOTIC_PATTERN(3, School.ILLUSION), 
	ICE_STORM(4, School.EVOCATION), 
	IDENTIFY(1, School.DIVINATION), 
	ILLUSORY_SCRIPT(1, School.ILLUSION), 
	IMPRISONMENT(9, School.ABJURATION), 
	INCENDIARY_CLOUD(8, School.CONJURATION), 
	INFLICT_WOUNDS(1, School.NECROMANCY), 
	INSECT_PLAGUE(5, School.CONJURATION), 
	INVISIBILITY(2, School.ILLUSION), 
	JUMP(1, School.TRANSMUTATION), 
	KNOCK(2, School.TRANSMUTATION), 
	LEGEND_LORE(5, School.DIVINATION), 
	LEOMUNDS_SECRET_CHEST(4, School.CONJURATION), 
	LEOMUNDS_TINY_HUT(3, School.EVOCATION), 
	LESSER_RESTORATION(2, School.ABJURATION), 
	LEVITATE(2, School.TRANSMUTATION), 
	LIGHT(0, School.EVOCATION), 
	LIGHTNING_ARROW(3, School.TRANSMUTATION), 
	LIGHTNING_BOLT(3, School.EVOCATION), 
	LOCATE_ANIMALS_OR_PLANTS(2, School.DIVINATION), 
	LOCATE_CREATURE(4, School.DIVINATION), 
	LOCATE_OBJECT(2, School.DIVINATION), 
	LONGSTRIDER(1, School.TRANSMUTATION), 
	MAGE_ARMOR(1, School.ABJURATION), 
	MAGE_HAND(0, School.CONJURATION), 
	MAGIC_CIRCLE(3, School.ABJURATION), 
	MAGIC_JAR(6, School.NECROMANCY), 
	MAGIC_MISSILE(1, School.EVOCATION), 
	MAGIC_MOUTH(2, School.ILLUSION), 
	MAGIC_WEAPON(2, School.TRANSMUTATION), 
	MAJOR_IMAGE(3, School.ILLUSION), 
	MASS_CURE_WOUNDS(5, School.CONJURATION), 
	MASS_HEAL(9, School.CONJURATION), 
	MASS_HEALING_WORD(3, School.EVOCATION), 
	MASS_SUGGESTION(6, School.ENCHANTMENT), 
	MAZE(8, School.CONJURATION), 
	MELD_INTO_STONE(3, School.TRANSMUTATION), 
	MELFS_ACID_ARROW(2, School.EVOCATION), 
	MENDING(0, School.TRANSMUTATION), 
	MESSAGE(0, School.TRANSMUTATION), 
	METEOR_SWARM(9, School.EVOCATION), 
	MIND_BLANK(8, School.ABJURATION), 
	MINOR_ILLUSION(0, School.ILLUSION), 
	MIRAGE_ARCANA(7, School.ILLUSION), 
	MIRROR_IMAGE(2, School.ILLUSION), 
	MISLEAD(5, School.ILLUSION), 
	MISTY_STEP(2, School.CONJURATION), 
	MODIFY_MEMORY(5, School.ENCHANTMENT), 
	MOONBEAM(2, School.EVOCATION), 
	MORDENKAINENS_FAITHFUL_HOUND(4, School.CONJURATION), 
	MORDENKAINENS_MAGNIFICENT_MANSION(7, School.CONJURATION), 
	MORDENKAINENS_PRIVATE_SANCTUM(4, School.ABJURATION), 
	MORDENKAINENS_SWORD(7, School.EVOCATION), 
	MOVE_EARTH(6, School.TRANSMUTATION), 
	NONDETECTION(3, School.ABJURATION), 
	NYSTULS_MAGIC_AURA(2, School.ILLUSION), 
	OTILUKES_FREEZING_SPHERE(6, School.EVOCATION), 
	OTILUKES_RESILIENT_SPHERE(4, School.EVOCATION), 
	OTTOS_IRRESISTIBLE_DANCE(6, School.ENCHANTMENT), 
	PASS_WITHOUT_TRACE(2, School.ABJURATION), 
	PASSWALL(5, School.TRANSMUTATION), 
	PHANTASMAL_FORCE(2, School.ILLUSION), 
	PHANTASMAL_KILLER(4, School.ILLUSION), 
	PHANTOM_STEED(3, School.ILLUSION), 
	PLANAR_ALLY(6, School.CONJURATION), 
	PLANAR_BINDING(5, School.ABJURATION), 
	PLANE_SHIFT(7, School.CONJURATION), 
	PLANT_GROWTH(3, School.TRANSMUTATION), 
	POISON_SPRAY(0, School.CONJURATION), 
	POLYMORPH(4, School.TRANSMUTATION), 
	POWER_WORD_HEAL(9, School.EVOCATION), 
	POWER_WORD_KILL(9, School.ENCHANTMENT), 
	POWER_WORD_STUN(8, School.ENCHANTMENT), 
	PRAYER_OF_HEALING(2, School.EVOCATION), 
	PRESTIDIGITATION(0, School.TRANSMUTATION), 
	PRISMATIC_SPRAY(7, School.EVOCATION), 
	PRISMATIC_WALL(9, School.ABJURATION), 
	PRODUCE_FLAME(0, School.CONJURATION), 
	PROGRAMMED_ILLUSION(6, School.ILLUSION), 
	PROJECT_IMAGE(7, School.ILLUSION), 
	PROTECTION_FROM_ENERGY(3, School.ABJURATION), 
	PROTECTION_FROM_EVIL_AND_GOOD(1, School.ABJURATION), 
	PROTECTION_FROM_POISON(2, School.ABJURATION), 
	PURIFY_FOOD_AND_DRINK(1, School.TRANSMUTATION), 
	RAISE_DEAD(5, School.NECROMANCY), 
	RARYS_TELEPATHIC_BOND(5, School.DIVINATION), 
	RAY_OF_ENFEEBLEMENT(2, School.NECROMANCY), 
	RAY_OF_FROST(0, School.EVOCATION), 
	RAY_OF_SICKNESS(1, School.NECROMANCY), 
	REGENERATE(7, School.TRANSMUTATION), 
	REINCARNATE(5, School.TRANSMUTATION), 
	REMOVE_CURSE(3, School.ABJURATION), 
	RESISTANCE(0, School.ABJURATION), 
	RESURRECTION(7, School.NECROMANCY), 
	REVERSE_GRAVITY(7, School.TRANSMUTATION), 
	REVIVIFY(3, School.CONJURATION), 
	ROPE_TRICK(2, School.TRANSMUTATION), 
	SACRED_FLAME(0, School.EVOCATION), 
	SANCTUARY(1, School.ABJURATION), 
	SCORCHING_RAY(2, School.EVOCATION), 
	SCRYING(5, School.DIVINATION), 
	SEARING_SMITE(1, School.EVOCATION), 
	SEE_INVISIBILITY(2, School.DIVINATION), 
	SEEMING(5, School.ILLUSION), 
	SENDING(3, School.EVOCATION), 
	SEQUESTER(7, School.TRANSMUTATION), 
	SHAPECHANGE(9, School.TRANSMUTATION), 
	SHATTER(2, School.EVOCATION), 
	SHIELD(1, School.ABJURATION), 
	SHIELD_OF_FAITH(1, School.ABJURATION), 
	SHILLELAGH(0, School.TRANSMUTATION), 
	SHOCKING_GRASP(0, School.EVOCATION), 
	SILENCE(2, School.ILLUSION), 
	SILENT_IMAGE(1, School.ILLUSION), 
	SIMULACRUM(7, School.ILLUSION), 
	SLEEP(1, School.ENCHANTMENT), 
	SLEET_STORM(3, School.CONJURATION), 
	SLOW(3, School.TRANSMUTATION), 
	SPARE_THE_DYING(0, School.NECROMANCY), 
	SPEAK_WITH_ANIMALS(1, School.DIVINATION), 
	SPEAK_WITH_DEAD(3, School.NECROMANCY), 
	SPEAK_WITH_PLANTS(3, School.TRANSMUTATION), 
	SPIDER_CLIMB(2, School.TRANSMUTATION), 
	SPIKE_GROWTH(2, School.TRANSMUTATION), 
	SPIRIT_GUARDIANS(3, School.CONJURATION), 
	SPIRITUAL_WEAPON(2, School.EVOCATION), 
	STAGGERING_SMITE(4, School.EVOCATION), 
	STINKING_CLOUD(3, School.CONJURATION), 
	STONE_SHAPE(4, School.TRANSMUTATION), 
	STONESKIN(4, School.ABJURATION), 
	STORM_OF_VENGEANCE(9, School.CONJURATION), 
	SUGGESTION(2, School.ENCHANTMENT), 
	SUNBEAM(6, School.EVOCATION), 
	SUNBURST(8, School.EVOCATION), 
	SWIFT_QUIVER(5, School.TRANSMUTATION), 
	SYMBOL(7, School.ABJURATION), 
	TASHAS_HIDEOUS_LAUGHTER(1, School.ENCHANTMENT), 
	TELEKINESIS(5, School.TRANSMUTATION), 
	TELEPATHY(8, School.EVOCATION), 
	TELEPORT(7, School.CONJURATION), 
	TELEPORTATION_CIRCLE(5, School.CONJURATION), 
	TENSERS_FLOATING_DISK(1, School.CONJURATION), 
	THAUMATURGY(0, School.TRANSMUTATION), 
	THORN_WHIP(0, School.TRANSMUTATION), 
	THUNDEROUS_SMITE(1, School.EVOCATION), 
	THUNDERWAVE(1, School.EVOCATION), 
	TIME_STOP(9, School.TRANSMUTATION), 
	TONGUES(3, School.DIVINATION), 
	TRANSPORT_VIA_PLANTS(6, School.CONJURATION), 
	TREE_STRIDE(5, School.CONJURATION), 
	TRUE_POLYMORPH(9, School.TRANSMUTATION), 
	TRUE_RESURRECTION(9, School.NECROMANCY), 
	TRUE_SEEING(6, School.DIVINATION), 
	TRUE_STRIKE(0, School.DIVINATION), 
	TSUNAMI(8, School.CONJURATION), 
	UNSEEN_SERVANT(1, School.CONJURATION), 
	VAMPIRIC_TOUCH(3, School.NECROMANCY), 
	VICIOUS_MOCKERY(0, School.ENCHANTMENT), 
	WALL_OF_FIRE(4, School.EVOCATION), 
	WALL_OF_FORCE(5, School.EVOCATION), 
	WALL_OF_ICE(6, School.EVOCATION), 
	WALL_OF_STONE(5, School.EVOCATION), 
	WALL_OF_THORNS(6, School.CONJURATION), 
	WARDING_BOND(2, School.ABJURATION), 
	WATER_BREATHING(3, School.TRANSMUTATION), 
	WATER_WALK(3, School.TRANSMUTATION), 
	WEB(2, School.CONJURATION), 
	WEIRD(9, School.ILLUSION), 
	WIND_WALK(6, School.TRANSMUTATION), 
	WIND_WALL(3, School.EVOCATION), 
	WISH(9, School.CONJURATION), 
	WITCH_BOLT(1, School.EVOCATION), 
	WORD_OF_RECALL(6, School.CONJURATION), 
	WRATHFUL_SMITE(1, School.EVOCATION), 
	ZONE_OF_TRUTH(2, School.ENCHANTMENT);

	// additional enumerators
	public enum School {
		ABJURATION, CONJURATION, DIVINATION, ENCHANTMENT, EVOCATION, ILLUSION, NECROMANCY, TRANSMUTATION
	}

	// spell lists
	private static final Spells[][] BARD_SPELLS = {
			{ BLADE_WARD, DANCING_LIGHTS, FRIENDS, LIGHT, MAGE_HAND, MENDING, MESSAGE, MINOR_ILLUSION, PRESTIDIGITATION,
					TRUE_STRIKE, VICIOUS_MOCKERY },
			{ ANIMAL_FRIENDSHIP, BANE, CHARM_PERSON, COMPREHEND_LANGUAGES, CURE_WOUNDS, DETECT_MAGIC, DISGUISE_SELF,
					DISSONANT_WHISPERS, FAERIE_FIRE, FEATHER_FALL, HEALING_WORD, HEROISM, IDENTIFY, ILLUSORY_SCRIPT,
					LONGSTRIDER, SILENT_IMAGE, SLEEP, SPEAK_WITH_ANIMALS, TASHAS_HIDEOUS_LAUGHTER, THUNDERWAVE,
					UNSEEN_SERVANT },
			{ ANIMAL_MESSENGER, BLINDNESS_DEAFNESS, CALM_EMOTIONS, CLOUD_OF_DAGGERS, CROWN_OF_MADNESS, DETECT_THOUGHTS,
					ENHANCE_ABILITY, ENTHRALL, HEAT_METAL, HOLD_PERSON, INVISIBILITY, KNOCK, LESSER_RESTORATION,
					LOCATE_ANIMALS_OR_PLANTS, LOCATE_OBJECT, MAGIC_MOUTH, PHANTASMAL_FORCE, SEE_INVISIBILITY, SHATTER,
					SILENCE, SUGGESTION, ZONE_OF_TRUTH },
			{ BESTOW_CURSE, CLAIRVOYANCE, DISPEL_MAGIC, FEAR, FEIGN_DEATH, GLYPH_OF_WARDING, HYPNOTIC_PATTERN,
					LEOMUNDS_TINY_HUT, MAJOR_IMAGE, NONDETECTION, PLANT_GROWTH, SENDING, SPEAK_WITH_DEAD,
					SPEAK_WITH_PLANTS, STINKING_CLOUD, TONGUES },
			{ COMPULSION, CONFUSION, DIMENSION_DOOR, FREEDOM_OF_MOVEMENT, GREATER_INVISIBILITY, HALLUCINATORY_TERRAIN,
					LOCATE_CREATURE, POLYMORPH },
			{ ANIMATE_OBJECTS, AWAKEN, DOMINATE_PERSON, DREAM, GEAS, GREATER_RESTORATION, HOLD_MONSTER, LEGEND_LORE,
					MASS_CURE_WOUNDS, MISLEAD, MODIFY_MEMORY, PLANAR_BINDING, RAISE_DEAD, SCRYING, SEEMING,
					TELEPORTATION_CIRCLE },
			{ EYEBITE, FIND_THE_PATH, GUARDS_AND_WARDS, MASS_SUGGESTION, OTTOS_IRRESISTIBLE_DANCE, PROGRAMMED_ILLUSION,
					TRUE_SEEING },
			{ ETHEREALNESS, FORCECAGE, MIRAGE_ARCANA, MORDENKAINENS_MAGNIFICENT_MANSION, MORDENKAINENS_SWORD,
					PROJECT_IMAGE, REGENERATE, RESURRECTION, SYMBOL, TELEPORT },
			{ DOMINATE_MONSTER, FEEBLEMIND, GLIBNESS, MIND_BLANK, POWER_WORD_STUN },
			{ FORESIGHT, POWER_WORD_HEAL, POWER_WORD_KILL, TRUE_POLYMORPH } };

	private static final Spells[][] CLERIC_SPELLS = {
			{ GUIDANCE, LIGHT, MENDING, RESISTANCE, SACRED_FLAME, SPARE_THE_DYING, THAUMATURGY },
			{ BANE, BLESS, COMMAND, CREATE_OR_DESTROY_WATER, CURE_WOUNDS, DETECT_EVIL_AND_GOOD, DETECT_MAGIC,
					DETECT_POISON_AND_DISEASE, GUIDING_BOLT, HEALING_WORD, INFLICT_WOUNDS,
					PROTECTION_FROM_EVIL_AND_GOOD, PURIFY_FOOD_AND_DRINK, SANCTUARY, SHIELD_OF_FAITH },
			{ AUGURY, BLINDNESS_DEAFNESS, CALM_EMOTIONS, CONTINUAL_FLAME, ENHANCE_ABILITY, HOLD_PERSON,
					LESSER_RESTORATION, LOCATE_OBJECT, PRAYER_OF_HEALING, PROTECTION_FROM_POISON, SILENCE,
					SPIRITUAL_WEAPON, WARDING_BOND, ZONE_OF_TRUTH },
			{ ANIMATE_DEAD, BEACON_OF_HOPE, BESTOW_CURSE, CLAIRVOYANCE, CREATE_FOOD_AND_WATER, DAYLIGHT, DISPEL_MAGIC,
					FEIGN_DEATH, GLYPH_OF_WARDING, MAGIC_CIRCLE, MASS_HEALING_WORD, MELD_INTO_STONE,
					PROTECTION_FROM_ENERGY, REMOVE_CURSE, REVIVIFY, SENDING, SPEAK_WITH_DEAD, SPIRIT_GUARDIANS, TONGUES,
					WATER_WALK },
			{ BANISHMENT, CONTROL_WATER, DEATH_WARD, DIVINATION, FREEDOM_OF_MOVEMENT, GUARDIAN_OF_FAITH,
					LOCATE_CREATURE, STONE_SHAPE },
			{ COMMUNE, CONTAGION, DISPEL_EVIL_AND_GOOD, FLAME_STRIKE, GEAS, GREATER_RESTORATION, HALLOW, INSECT_PLAGUE,
					LEGEND_LORE, MASS_CURE_WOUNDS, PLANAR_BINDING, RAISE_DEAD, SCRYING },
			{ BLADE_BARRIER, CREATE_UNDEAD, FIND_THE_PATH, FORBIDDANCE, HARM, HEAL, HEROES_FEAST, PLANAR_ALLY,
					TRUE_SEEING, WORD_OF_RECALL },
			{ CONJURE_CELESTIAL, DIVINE_WORD, ETHEREALNESS, FIRE_STORM, PLANE_SHIFT, REGENERATE, RESURRECTION, SYMBOL },
			{ ANTIMAGIC_FIELD, CONTROL_WEATHER, EARTHQUAKE, HOLY_AURA },
			{ ASTRAL_PROJECTION, GATE, MASS_HEAL, TRUE_RESURRECTION } };

	private static final Spells[][] DRUID_SPELLS = {
			{ DRUIDCRAFT, GUIDANCE, MENDING, POISON_SPRAY, PRODUCE_FLAME, RESISTANCE, SHILLELAGH, THORN_WHIP },
			{ ANIMAL_FRIENDSHIP, CHARM_PERSON, CREATE_OR_DESTROY_WATER, CURE_WOUNDS, DETECT_MAGIC,
					DETECT_POISON_AND_DISEASE, ENTANGLE, FAERIE_FIRE, FOG_CLOUD, GOODBERRY, HEALING_WORD, JUMP,
					LONGSTRIDER, PURIFY_FOOD_AND_DRINK, SPEAK_WITH_ANIMALS, THUNDERWAVE },
			{ ANIMAL_MESSENGER, BARKSKIN, BEAST_SENSE, DARKVISION, ENHANCE_ABILITY, FIND_TRAPS, FLAME_BLADE,
					FLAMING_SPHERE, GUST_OF_WIND, HEAT_METAL, HOLD_PERSON, LESSER_RESTORATION, LOCATE_ANIMALS_OR_PLANTS,
					LOCATE_OBJECT, MOONBEAM, PASS_WITHOUT_TRACE, PROTECTION_FROM_POISON, SPIKE_GROWTH },
			{ CALL_LIGHTNING, CONJURE_ANIMALS, DAYLIGHT, DISPEL_MAGIC, FEIGN_DEATH, MELD_INTO_STONE, PLANT_GROWTH,
					PROTECTION_FROM_ENERGY, SLEET_STORM, SPEAK_WITH_PLANTS, WATER_BREATHING, WATER_WALK, WIND_WALL },
			{ BLIGHT, CONFUSION, CONJURE_MINOR_ELEMENTALS, CONJURE_WOODLAND_BEINGS, CONTROL_WATER, DOMINATE_BEAST,
					FREEDOM_OF_MOVEMENT, GIANT_INSECT, GRASPING_VINE, HALLUCINATORY_TERRAIN, ICE_STORM, LOCATE_CREATURE,
					POLYMORPH, STONE_SHAPE, STONESKIN, WALL_OF_FIRE },
			{ ANTILIFE_SHELL, AWAKEN, COMMUNE_WITH_NATURE, CONJURE_ELEMENTAL, CONTAGION, GEAS, GREATER_RESTORATION,
					INSECT_PLAGUE, MASS_CURE_WOUNDS, PLANAR_BINDING, REINCARNATE, SCRYING, TREE_STRIDE, WALL_OF_STONE },
			{ CONJURE_FEY, FIND_THE_PATH, HEAL, HEROES_FEAST, MOVE_EARTH, SUNBEAM, TRANSPORT_VIA_PLANTS, WALL_OF_THORNS,
					WIND_WALK },
			{ FIRE_STORM, MIRAGE_ARCANA, PLANE_SHIFT, REGENERATE, REVERSE_GRAVITY },
			{ ANIMAL_SHAPES, ANTIPATHY_SYMPATHY, CONTROL_WEATHER, EARTHQUAKE, FEEBLEMIND, SUNBURST, TSUNAMI },
			{ FORESIGHT, SHAPECHANGE, STORM_OF_VENGEANCE, TRUE_RESURRECTION } };

	private static Spells[][] PALADIN_SPELLS = { {},
			{ BLESS, COMMAND, COMPELLED_DUEL, CURE_WOUNDS, DETECT_EVIL_AND_GOOD, DETECT_MAGIC,
					DETECT_POISON_AND_DISEASE, DIVINE_FAVOR, HEROISM, PROTECTION_FROM_EVIL_AND_GOOD,
					PURIFY_FOOD_AND_DRINK, SEARING_SMITE, SHIELD_OF_FAITH, THUNDEROUS_SMITE, WRATHFUL_SMITE },
			{ AID, BRANDING_SMITE, FIND_STEED, LESSER_RESTORATION, LOCATE_OBJECT, MAGIC_WEAPON, PROTECTION_FROM_POISON,
					ZONE_OF_TRUTH },
			{ AURA_OF_VITALITY, BLINDING_SMITE, CREATE_FOOD_AND_WATER, CRUSADERS_MANTLE, DAYLIGHT, DISPEL_MAGIC,
					ELEMENTAL_WEAPON, MAGIC_CIRCLE, REMOVE_CURSE, REVIVIFY },
			{ AURA_OF_LIFE, AURA_OF_PURITY, BANISHMENT, DEATH_WARD, LOCATE_CREATURE, STAGGERING_SMITE },
			{ BANISHING_SMITE, CIRCLE_OF_POWER, DESTRUCTIVE_WAVE, DISPEL_EVIL_AND_GOOD, GEAS, RAISE_DEAD } };

	private static Spells[][] RANGER_SPELLS = { {},
			{ ALARM, ANIMAL_FRIENDSHIP, CURE_WOUNDS, DETECT_MAGIC, DETECT_POISON_AND_DISEASE, ENSNARING_STRIKE,
					FOG_CLOUD, GOODBERRY, HAIL_OF_THORNS, HUNTERS_MARK, JUMP, LONGSTRIDER, SPEAK_WITH_ANIMALS },
			{ ANIMAL_MESSENGER, BARKSKIN, BEAST_SENSE, CORDON_OF_ARROWS, DARKVISION, FIND_TRAPS, LESSER_RESTORATION,
					LOCATE_ANIMALS_OR_PLANTS, LOCATE_OBJECT, PASS_WITHOUT_TRACE, PROTECTION_FROM_POISON, SILENCE,
					SPIKE_GROWTH },
			{ CONJURE_ANIMALS, CONJURE_BARRAGE, DAYLIGHT, LIGHTNING_ARROW, NONDETECTION, PLANT_GROWTH,
					PROTECTION_FROM_ENERGY, SPEAK_WITH_PLANTS, WATER_BREATHING, WATER_WALK, WIND_WALL },
			{ CONJURE_WOODLAND_BEINGS, FREEDOM_OF_MOVEMENT, GRASPING_VINE, LOCATE_CREATURE, STONESKIN },
			{ COMMUNE_WITH_NATURE, CONJURE_VOLLEY, SWIFT_QUIVER, TREE_STRIDE } };

	private static Spells[][] SORCERER_SPELLS = {
			{ ACID_SPLASH, BLADE_WARD, CHILL_TOUCH, DANCING_LIGHTS, FIREBOLT, FRIENDS, LIGHT, MAGE_HAND, MENDING,
					MESSAGE, MINOR_ILLUSION, POISON_SPRAY, PRESTIDIGITATION, RAY_OF_FROST, SHOCKING_GRASP,
					TRUE_STRIKE },
			{ BURNING_HANDS, CHARM_PERSON, CHROMATIC_ORB, COLOR_SPRAY, COMPREHEND_LANGUAGES, DETECT_MAGIC,
					DISGUISE_SELF, EXPEDITIOUS_RETREAT, FALSE_LIFE, FEATHER_FALL, FOG_CLOUD, JUMP, MAGE_ARMOR,
					MAGIC_MISSILE, RAY_OF_SICKNESS, SHIELD, SILENT_IMAGE, SLEEP, THUNDERWAVE, WITCH_BOLT },
			{ ALTER_SELF, BLINDNESS_DEAFNESS, BLUR, CLOUD_OF_DAGGERS, CROWN_OF_MADNESS, DARKNESS, DARKVISION,
					DETECT_THOUGHTS, ENHANCE_ABILITY, ENLARGE_REDUCE, GUST_OF_WIND, HOLD_PERSON, INVISIBILITY, KNOCK,
					LEVITATE, MIRROR_IMAGE, MISTY_STEP, PHANTASMAL_FORCE, SCORCHING_RAY, SEE_INVISIBILITY, SHATTER,
					SPIDER_CLIMB, SUGGESTION, WEB },
			{ BLINK, CLAIRVOYANCE, COUNTERSPELL, DAYLIGHT, DISPEL_MAGIC, FEAR, FIREBALL, FLY, GASEOUS_FORM, HASTE,
					HYPNOTIC_PATTERN, LIGHTNING_BOLT, MAJOR_IMAGE, PROTECTION_FROM_ENERGY, SLEET_STORM, SLOW,
					STINKING_CLOUD, TONGUES, WATER_BREATHING, WATER_WALK },
			{ BANISHMENT, BLIGHT, CONFUSION, DIMENSION_DOOR, DOMINATE_BEAST, GREATER_INVISIBILITY, ICE_STORM, POLYMORPH,
					STONESKIN, WALL_OF_FIRE },
			{ ANIMATE_OBJECTS, CLOUDKILL, CONE_OF_COLD, CREATION, DOMINATE_PERSON, HOLD_MONSTER, INSECT_PLAGUE, SEEMING,
					TELEKINESIS, TELEPORTATION_CIRCLE, WALL_OF_STONE },
			{ ARCANE_GATE, CHAIN_LIGHTNING, CIRCLE_OF_DEATH, DISINTEGRATE, EYEBITE, GLOBE_OF_INVULNERABILITY,
					MASS_SUGGESTION, MOVE_EARTH, SUNBEAM, TRUE_SEEING },
			{ DELAYED_BLAST_FIREBALL, ETHEREALNESS, FINGER_OF_DEATH, FIRE_STORM, PLANE_SHIFT, PRISMATIC_SPRAY,
					REVERSE_GRAVITY, TELEPORT },
			{ DOMINATE_MONSTER, EARTHQUAKE, INCENDIARY_CLOUD, POWER_WORD_STUN, SUNBURST },
			{ GATE, METEOR_SWARM, POWER_WORD_KILL, TIME_STOP, WISH } };

	private static Spells[][] WARLOCK_SPELLS = {
			{ BLADE_WARD, CHILL_TOUCH, ELDRITCH_BLAST, FRIENDS, MAGE_HAND, MINOR_ILLUSION, POISON_SPRAY,
					PRESTIDIGITATION, TRUE_STRIKE },
			{ CLOUD_OF_DAGGERS, CROWN_OF_MADNESS, DARKNESS, ENTHRALL, HOLD_PERSON, INVISIBILITY, MIRROR_IMAGE,
					MISTY_STEP, RAY_OF_ENFEEBLEMENT, SHATTER, SPIDER_CLIMB, SUGGESTION },
			{ COUNTERSPELL, DISPEL_MAGIC, FEAR, FLY, GASEOUS_FORM, HUNGER_OF_HADAR, HYPNOTIC_PATTERN, MAGIC_CIRCLE,
					MAJOR_IMAGE, REMOVE_CURSE, TONGUES, VAMPIRIC_TOUCH },
			{ BANISHMENT, BLIGHT, DIMENSION_DOOR, HALLUCINATORY_TERRAIN },
			{ CONTACT_OTHER_PLANE, DREAM, HOLD_MONSTER, SCRYING },
			{ ARCANE_GATE, CIRCLE_OF_DEATH, CONJURE_FEY, CREATE_UNDEAD, EYEBITE, FLESH_TO_STONE, MASS_SUGGESTION,
					TRUE_SEEING },
			{ ETHEREALNESS, FINGER_OF_DEATH, FORCECAGE, PLANE_SHIFT },
			{ DEMIPLANE, DOMINATE_MONSTER, FEEBLEMIND, GLIBNESS, POWER_WORD_STUN },
			{ ASTRAL_PROJECTION, FORESIGHT, IMPRISONMENT, POWER_WORD_KILL, TRUE_POLYMORPH } };

	private static Spells[][] WIZARD_SPELLS = {
			{ ACID_SPLASH, BLADE_WARD, CHILL_TOUCH, DANCING_LIGHTS, FIREBOLT, FRIENDS, LIGHT, MAGE_HAND, MENDING,
					MESSAGE, MINOR_ILLUSION, POISON_SPRAY, PRESTIDIGITATION, RAY_OF_FROST, SHOCKING_GRASP,
					TRUE_STRIKE },
			{ ALARM, BURNING_HANDS, CHARM_PERSON, CHROMATIC_ORB, COLOR_SPRAY, COMPREHEND_LANGUAGES, DETECT_MAGIC,
					DISGUISE_SELF, EXPEDITIOUS_RETREAT, FALSE_LIFE, FEATHER_FALL, FIND_FAMILIAR, FOG_CLOUD, GREASE,
					IDENTIFY, ILLUSORY_SCRIPT, JUMP, LONGSTRIDER, MAGE_ARMOR, MAGIC_MISSILE,
					PROTECTION_FROM_EVIL_AND_GOOD, RAY_OF_SICKNESS, SHIELD, SILENT_IMAGE, SLEEP,
					TASHAS_HIDEOUS_LAUGHTER, TENSERS_FLOATING_DISK, THUNDERWAVE, UNSEEN_SERVANT, WITCH_BOLT },
			{ ALTER_SELF, ARCANE_LOCK, BLINDNESS_DEAFNESS, BLUR, CLOUD_OF_DAGGERS, CONTINUAL_FLAME, CROWN_OF_MADNESS,
					DARKVISION, DETECT_THOUGHTS, ENLARGE_REDUCE, FLAMING_SPHERE, GENTLE_REPOSE, GUST_OF_WIND,
					HOLD_PERSON, INVISIBILITY, KNOCK, LEVITATE, LOCATE_OBJECT, MAGIC_MOUTH, MAGIC_WEAPON,
					MELFS_ACID_ARROW, MIRROR_IMAGE, MISTY_STEP, NYSTULS_MAGIC_AURA, PHANTASMAL_FORCE,
					RAY_OF_ENFEEBLEMENT, ROPE_TRICK, SCORCHING_RAY, SEE_INVISIBILITY, SHATTER, SPIDER_CLIMB, SUGGESTION,
					WEB },
			{ ANIMATE_DEAD, BESTOW_CURSE, BLINK, CLAIRVOYANCE, COUNTERSPELL, DISPEL_MAGIC, FEAR, FEIGN_DEATH, FIREBALL,
					FLY, GASEOUS_FORM, GLYPH_OF_WARDING, HASTE, HYPNOTIC_PATTERN, LEOMUNDS_TINY_HUT, LIGHTNING_BOLT,
					MAGIC_CIRCLE, MAJOR_IMAGE, NONDETECTION, PHANTOM_STEED, PROTECTION_FROM_ENERGY, REMOVE_CURSE,
					SENDING, SLEET_STORM, SLOW, STINKING_CLOUD, TONGUES, VAMPIRIC_TOUCH, WATER_BREATHING },
			{ ARCANE_EYE, BANISHMENT, BLIGHT, CONFUSION, CONJURE_MINOR_ELEMENTALS, CONTROL_WATER, DIMENSION_DOOR,
					EVARDS_BLACK_TENTACLES, FABRICATE, FIRE_SHIELD, GREATER_INVISIBILITY, HALLUCINATORY_TERRAIN,
					ICE_STORM, LEOMUNDS_SECRET_CHEST, LOCATE_CREATURE, MORDENKAINENS_FAITHFUL_HOUND,
					MORDENKAINENS_PRIVATE_SANCTUM, OTILUKES_RESILIENT_SPHERE, PHANTASMAL_KILLER, POLYMORPH, STONE_SHAPE,
					STONESKIN, WALL_OF_FIRE },
			{ ANIMATE_OBJECTS, BIGBYS_HAND, CLOUDKILL, CONE_OF_COLD, CONJURE_ELEMENTAL, CONTACT_OTHER_PLANE, CREATION,
					DOMINATE_PERSON, DREAM, GEAS, HOLD_MONSTER, LEGEND_LORE, MISLEAD, MODIFY_MEMORY, PASSWALL,
					PLANAR_BINDING, RARYS_TELEPATHIC_BOND, SCRYING, TELEKINESIS, TELEPORTATION_CIRCLE, WALL_OF_FORCE,
					WALL_OF_STONE },
			{ ARCANE_GATE, CHAIN_LIGHTNING, CIRCLE_OF_DEATH, CONTINGENCY, CREATE_UNDEAD, DISINTEGRATE,
					DRAWMIJS_INSTANT_SUMMONS, EYEBITE, FLESH_TO_STONE, GLOBE_OF_INVULNERABILITY, GUARDS_AND_WARDS,
					MAGIC_JAR, MASS_SUGGESTION, MOVE_EARTH, OTILUKES_FREEZING_SPHERE, OTTOS_IRRESISTIBLE_DANCE,
					PROGRAMMED_ILLUSION, SUNBEAM, TRUE_SEEING, WALL_OF_ICE },
			{ DELAYED_BLAST_FIREBALL, ETHEREALNESS, FINGER_OF_DEATH, FORCECAGE, MIRAGE_ARCANA,
					MORDENKAINENS_MAGNIFICENT_MANSION, MORDENKAINENS_SWORD, PLANE_SHIFT, PRISMATIC_SPRAY, PROJECT_IMAGE,
					REVERSE_GRAVITY, SEQUESTER, SIMULACRUM, SYMBOL, TELEPORT },
			{ ANTIMAGIC_FIELD, ANTIPATHY_SYMPATHY, CLONE, CONTROL_WEATHER, DEMIPLANE, DOMINATE_MONSTER, FEEBLEMIND,
					INCENDIARY_CLOUD, MAZE, MIND_BLANK, POWER_WORD_STUN, SUNBURST, TELEPATHY },
			{ ASTRAL_PROJECTION, FORESIGHT, GATE, IMPRISONMENT, METEOR_SWARM, POWER_WORD_KILL, PRISMATIC_WALL,
					SHAPECHANGE, TIME_STOP, TRUE_POLYMORPH, WEIRD, WISH } };

	//
	private static final int[] BARD_KNOWN = { 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 15, 16, 18, 19, 19, 20, 22, 22, 22 };
	// used by ELDRITCH_KNIGHT fighter and ARCANE_TRICKSTER rogue
	private static final int[] FIGHTER_KNOWN = { 0, 0, 3, 4, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 11, 11, 12, 13 };
	private static final int[] RANGER_KNOWN = { 0, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11 };
	private static final int[] SORCERER_KNOWN = { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 13, 13, 14, 14, 15, 15, 15, 15 };
	private static final int[] WARLOCK_KNOWN = { 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15 };

	// fields
	private School school;
	private int level;

	// constructors
	private Spells(int level, School school) {
		this.level = level;
		this.school = school;
	}

	// methods
	public School getSchool() {
		return school;
	}

	public int getLevel() {
		return level;
	}

	// static methods
	public static void bardCantripSetup(Actor actor) {
		HashSet<Spells> toAdd = new HashSet<Spells>();
		
		int dice = Dice.roll(3);
		if (dice == 1)
			toAdd.add(VICIOUS_MOCKERY);

		dice = Dice.roll(6);
		if (dice == 1)
			toAdd.add(DANCING_LIGHTS);
		else if (dice == 2)
			toAdd.add(MAGE_HAND);
		else if (dice == 3)
			toAdd.add(MESSAGE);
		else if (dice == 4)
			toAdd.add(MINOR_ILLUSION);
		else if (dice == 5)
			toAdd.add(PRESTIDIGITATION);

	}

	private static void bardCantripHelper(Actor actor) {
		HashSet<Spells> cantrips = actor.getCantrips().getSpellsKnown();
		Spells[] array = BARD_SPELLS[0];

		Spells candidate = array[Dice.roll(array.length) - 1];
		while (cantrips.contains(candidate)) {
			candidate = array[Dice.roll(array.length) - 1];
		}
		
	}

	public static HashSet<Spells> bardSetup(Actor actor) {
		int level = actor.getLevel();
		HashSet<Spells> spellsKnown = new HashSet<Spells>();

		int dice = Dice.roll(3);
		if (dice == 1)
			spellsKnown.add(CURE_WOUNDS);
		else if (dice == 2)
			spellsKnown.add(HEALING_WORD);

		dice = Dice.roll(3);
		if (dice == 1)
			spellsKnown.add(ANIMAL_FRIENDSHIP);
		else if (dice == 2)
			spellsKnown.add(CHARM_PERSON);

		dice = Dice.roll(3);
		if (dice == 1)
			spellsKnown.add(DISSONANT_WHISPERS);
		else if (dice == 2)
			spellsKnown.add(THUNDERWAVE);

		while (spellsKnown.size() < BARD_KNOWN[0]) {
			spellsKnown.add(randomBardSpell(level));
		}

		return spellsKnown;
	}

	public static HashSet<Spells> bardUpdate(Actor actor) {
		// TODO
		int level = actor.getLevel();
		Spellcasting spellcasting = actor.getSpellcasting();
		HashSet<Spells> spellsKnown = spellcasting.getSpellsKnown();

		while (spellsKnown.size() < BARD_KNOWN[level - 1]) {
			spellsKnown.add(randomBardSpell(level));
		}

		return spellsKnown;
	}

	public static HashSet<Spells> spellbookSetup(Actor actor) {
		Class.Subclass archetype = actor.getArchetype();
		HashSet<Spells> spellbook = new HashSet<Spells>();
		List<Spells> candidates = new ArrayList<Spells>();

		spellbook.add(MAGE_ARMOR);
		if (Dice.roll(2) == 1)
			spellbook.add(FIND_FAMILIAR);
		if (Dice.roll(2) == 1)
			spellbook.add(IDENTIFY);

		if (archetype.equals(Class.Subclass.ABJURER))
			candidates.addAll(filterSpellsBySchool(School.ABJURATION, 1));
		else if (archetype.equals(Class.Subclass.CONJUROR))
			candidates.addAll(filterSpellsBySchool(School.CONJURATION, 1));
		else if (archetype.equals(Class.Subclass.DIVINER))
			candidates.addAll(filterSpellsBySchool(School.DIVINATION, 1));
		else if (archetype.equals(Class.Subclass.ENCHANTER))
			candidates.addAll(filterSpellsBySchool(School.ENCHANTMENT, 1));
		else if (archetype.equals(Class.Subclass.EVOKER))
			candidates.addAll(filterSpellsBySchool(School.EVOCATION, 1));
		else if (archetype.equals(Class.Subclass.ILLUSIONIST))
			candidates.addAll(filterSpellsBySchool(School.ILLUSION, 1));
		else if (archetype.equals(Class.Subclass.NECROMANCER))
			candidates.addAll(filterSpellsBySchool(School.NECROMANCY, 1));
		else if (archetype.equals(Class.Subclass.TRANSMUTER))
			candidates.addAll(filterSpellsBySchool(School.TRANSMUTATION, 1));

		Collections.shuffle(candidates);
		for (int i = 0; candidates.isEmpty() != true && i < 3; ++i) {
			spellbook.add(candidates.remove(0));
		}

		while (spellbook.size() < 6) {
			spellbook.add(randomWizardSpell(1));
		}

		return spellbook;
	}

	public static HashSet<Spells> spellbookUpdate(Actor actor) {
		// TODO - requires updates
		Spellcasting spellcasting = actor.getSpellcasting();
		HashSet<Spells> spellsKnown = spellcasting.getSpellsKnown();

		Class.Subclass archetype = actor.getArchetype();
		int level = actor.getLevel();

		/*
		 * FIXME - ABSOLUTELY needs to check for existing wizard's spellbook before simply
		 * adding to the character's new "spells known." I'm going to have to work out
		 * exactly how a wizard will replace a lost spellbook (i.e. by the rules)
		 */
		HashSet<Spells> spellbook = new HashSet<Spells>(spellsKnown);
		List<Spells> candidates = new ArrayList<Spells>();

		if (archetype.equals(Class.Subclass.ABJURER))
			candidates.addAll(filterSpellsBySchool(School.ABJURATION, level));
		else if (archetype.equals(Class.Subclass.CONJUROR))
			candidates.addAll(filterSpellsBySchool(School.CONJURATION, level));
		else if (archetype.equals(Class.Subclass.DIVINER))
			candidates.addAll(filterSpellsBySchool(School.DIVINATION, level));
		else if (archetype.equals(Class.Subclass.ENCHANTER))
			candidates.addAll(filterSpellsBySchool(School.ENCHANTMENT, level));
		else if (archetype.equals(Class.Subclass.EVOKER))
			candidates.addAll(filterSpellsBySchool(School.EVOCATION, level));
		else if (archetype.equals(Class.Subclass.ILLUSIONIST))
			candidates.addAll(filterSpellsBySchool(School.ILLUSION, level));
		else if (archetype.equals(Class.Subclass.NECROMANCER))
			candidates.addAll(filterSpellsBySchool(School.NECROMANCY, level));
		else if (archetype.equals(Class.Subclass.TRANSMUTER))
			candidates.addAll(filterSpellsBySchool(School.TRANSMUTATION, level));

		Collections.shuffle(candidates);
		int targetNumber = spellbook.size() + 2;

		for (int i = 0; candidates.isEmpty() != true && i < 1; ++i) {
			if (spellbook.add(candidates.remove(0)) != true)
				--i;
		}

		while (spellbook.size() < targetNumber) {
			spellbook.add(randomWizardSpell(level));
		}

		return spellbook;
	}

	public static Spells randomBardSpell(int level) {
		level = ((level - 1) / 2 + 1 > 9) ? 9 : ((level - 1) / 2 + 1 < 1) ? 1 : (level - 1) / 2 + 1;
		Spells[] array = BARD_SPELLS[level];
		int dice = Dice.roll(array.length) - 1;

		return array[dice];
	}

	public static Spells randomWizardSpell(int level) {
		level = ((level - 1) / 2 + 1 > 9) ? 9 : ((level - 1) / 2 + 1 < 1) ? 1 : (level - 1) / 2 + 1;
		Spells[] array = WIZARD_SPELLS[level];
		int dice = Dice.roll(array.length) - 1;

		return array[dice];
	}

	public static List<Spells> filterSpellsBySchool(School school, int level) {
		List<Spells> list = new ArrayList<Spells>();

		level = ((level - 1) / 2 + 1 > 9) ? 9 : ((level - 1) / 2 + 1 < 1) ? 1 : (level - 1) / 2 + 1;
		List<Spells> spells = new ArrayList<Spells>(Arrays.asList(WIZARD_SPELLS[level]));
		for (Spells el : spells) {
			if (el.getSchool().equals(school))
				list.add(el);
		}

		return list;
	}

	public static HashSet<Spells> randomWizardSpellbook(int bookLevel) {
		HashSet<Spells> spellbook = new HashSet<Spells>();
		Spells candidate;
		int spellLevel;

		if (bookLevel > 20)
			bookLevel = 20;

		Spells[] array;
		for (int i = 1; i <= bookLevel; ++i) {
			spellLevel = ((i - 1) / 2 + 1 > 9) ? 9 : ((i - 1) / 2 + 1 < 1) ? 1 : (i - 1) / 2 + 1;
			array = WIZARD_SPELLS[spellLevel];

			for (int j = 0; j < ((i == 1) ? 6 : 2); ++j) {
				candidate = array[Dice.roll(array.length) - 1];
				while (spellbook.contains(candidate)) {
					candidate = array[Dice.roll(array.length) - 1];
				}
				spellbook.add(candidate);
			}

		}

		return spellbook;
	}

}
