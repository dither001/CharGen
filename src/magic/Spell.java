package magic;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import com.norvendae.rules.misc.Dice;

import actor.Actor;
import actor.Class;
import actor.Player;
import actor.Subclass;

public enum Spell {
	ACID_SPLASH, AID, ALARM, ALTER_SELF, ANIMAL_FRIENDSHIP, ANIMAL_MESSENGER, ANIMAL_SHAPES, ANIMATE_DEAD, ANIMATE_OBJECTS, ANTILIFE_SHELL, ANTIMAGIC_FIELD, ANTIPATHY_SYMPATHY, ARCANE_EYE, ARCANE_GATE, ARCANE_LOCK, ARMOR_OF_AGATHYS, ARMS_OF_HADAR, ASTRAL_PROJECTION, AUGURY, AURA_OF_LIFE, AURA_OF_PURITY, AURA_OF_VITALITY, AWAKEN, BANE, BANISHING_SMITE, BANISHMENT, BARKSKIN, BEACON_OF_HOPE, BEAST_SENSE, BESTOW_CURSE, BIGBYS_HAND, BLADE_BARRIER, BLADE_WARD, BLESS, BLIGHT, BLINDING_SMITE, BLINDNESS_DEAFNESS, BLINK, BLUR, BRANDING_SMITE, BURNING_HANDS, CALL_LIGHTNING, CALM_EMOTIONS, CHAIN_LIGHTNING, CHARM_PERSON, CHILL_TOUCH, CHROMATIC_ORB, CIRCLE_OF_DEATH, CIRCLE_OF_POWER, CLAIRVOYANCE, CLONE, CLOUD_OF_DAGGERS, CLOUDKILL, COLOR_SPRAY, COMMAND, COMMUNE, COMMUNE_WITH_NATURE, COMPELLED_DUEL, COMPREHEND_LANGUAGES, COMPULSION, CONE_OF_COLD, CONFUSION, CONJURE_ANIMALS, CONJURE_BARRAGE, CONJURE_CELESTIAL, CONJURE_ELEMENTAL, CONJURE_FEY, CONJURE_MINOR_ELEMENTALS, CONJURE_VOLLEY, CONJURE_WOODLAND_BEINGS, CONTACT_OTHER_PLANE, CONTAGION, CONTINGENCY, CONTINUAL_FLAME, CONTROL_WATER, CONTROL_WEATHER, CORDON_OF_ARROWS, COUNTERSPELL, CREATE_FOOD_AND_WATER, CREATE_OR_DESTROY_WATER, CREATE_UNDEAD, CREATION, CROWN_OF_MADNESS, CRUSADERS_MANTLE, CURE_WOUNDS, DANCING_LIGHTS, DARKNESS, DARKVISION, DAYLIGHT, DEATH_WARD, DELAYED_BLAST_FIREBALL, DEMIPLANE, DESTRUCTIVE_WAVE, DETECT_EVIL_AND_GOOD, DETECT_MAGIC, DETECT_POISON_AND_DISEASE, DETECT_THOUGHTS, DIMENSION_DOOR, DISGUISE_SELF, DISINTEGRATE, DISPEL_EVIL_AND_GOOD, DISPEL_MAGIC, DISSONANT_WHISPERS, DIVINATION, DIVINE_FAVOR, DIVINE_WORD, DOMINATE_BEAST, DOMINATE_MONSTER, DOMINATE_PERSON, DRAWMIJS_INSTANT_SUMMONS, DREAM, DRUIDCRAFT, EARTHQUAKE, ELDRITCH_BLAST, ELEMENTAL_WEAPON, ENHANCE_ABILITY, ENLARGE_REDUCE, ENSNARING_STRIKE, ENTANGLE, ENTHRALL, ETHEREALNESS, EVARDS_BLACK_TENTACLES, EXPEDITIOUS_RETREAT, EYEBITE, FABRICATE, FAERIE_FIRE, FALSE_LIFE, FEAR, FEATHER_FALL, FEEBLEMIND, FEIGN_DEATH, FIND_FAMILIAR, FIND_STEED, FIND_THE_PATH, FIND_TRAPS, FINGER_OF_DEATH, FIREBALL, FIREBOLT, FIRE_SHIELD, FIRE_STORM, FLAME_BLADE, FLAME_STRIKE, FLAMING_SPHERE, FLESH_TO_STONE, FLY, FOG_CLOUD, FORBIDDANCE, FORCECAGE, FORESIGHT, FREEDOM_OF_MOVEMENT, FRIENDS, GASEOUS_FORM, GATE, GEAS, GENTLE_REPOSE, GIANT_INSECT, GLIBNESS, GLOBE_OF_INVULNERABILITY, GLYPH_OF_WARDING, GOODBERRY, GRASPING_VINE, GREASE, GREATER_INVISIBILITY, GREATER_RESTORATION, GUARDIAN_OF_FAITH, GUARDS_AND_WARDS, GUIDANCE, GUIDING_BOLT, GUST_OF_WIND, HAIL_OF_THORNS, HALLOW, HALLUCINATORY_TERRAIN, HARM, HASTE, HEAL, HEALING_WORD, HEAT_METAL, HELLISH_REBUKE, HEROES_FEAST, HEROISM, HEX, HOLD_MONSTER, HOLD_PERSON, HOLY_AURA, HUNGER_OF_HADAR, HUNTERS_MARK, HYPNOTIC_PATTERN, ICE_STORM, IDENTIFY, ILLUSORY_SCRIPT, IMPRISONMENT, INCENDIARY_CLOUD, INFLICT_WOUNDS, INSECT_PLAGUE, INVISIBILITY, JUMP, KNOCK, LEGEND_LORE, LEOMUNDS_SECRET_CHEST, LEOMUNDS_TINY_HUT, LESSER_RESTORATION, LEVITATE, LIGHT, LIGHTNING_ARROW, LIGHTNING_BOLT, LOCATE_ANIMALS_OR_PLANTS, LOCATE_CREATURE, LOCATE_OBJECT, LONGSTRIDER, MAGE_ARMOR, MAGE_HAND, MAGIC_CIRCLE, MAGIC_JAR, MAGIC_MISSILE, MAGIC_MOUTH, MAGIC_WEAPON, MAJOR_IMAGE, MASS_CURE_WOUNDS, MASS_HEAL, MASS_HEALING_WORD, MASS_SUGGESTION, MAZE, MELD_INTO_STONE, MELFS_ACID_ARROW, MENDING, MESSAGE, METEOR_SWARM, MIND_BLANK, MINOR_ILLUSION, MIRAGE_ARCANA, MIRROR_IMAGE, MISLEAD, MISTY_STEP, MODIFY_MEMORY, MOONBEAM, MORDENKAINENS_FAITHFUL_HOUND, MORDENKAINENS_MAGNIFICENT_MANSION, MORDENKAINENS_PRIVATE_SANCTUM, MORDENKAINENS_SWORD, MOVE_EARTH, NONDETECTION, NYSTULS_MAGIC_AURA, OTILUKES_FREEZING_SPHERE, OTILUKES_RESILIENT_SPHERE, OTTOS_IRRESISTIBLE_DANCE, PASS_WITHOUT_TRACE, PASSWALL, PHANTASMAL_FORCE, PHANTASMAL_KILLER, PHANTOM_STEED, PLANAR_ALLY, PLANAR_BINDING, PLANE_SHIFT, PLANT_GROWTH, POISON_SPRAY, POLYMORPH, POWER_WORD_HEAL, POWER_WORD_KILL, POWER_WORD_STUN, PRAYER_OF_HEALING, PRESTIDIGITATION, PRISMATIC_SPRAY, PRISMATIC_WALL, PRODUCE_FLAME, PROGRAMMED_ILLUSION, PROJECT_IMAGE, PROTECTION_FROM_ENERGY, PROTECTION_FROM_EVIL_AND_GOOD, PROTECTION_FROM_POISON, PURIFY_FOOD_AND_DRINK, RAISE_DEAD, RARYS_TELEPATHIC_BOND, RAY_OF_ENFEEBLEMENT, RAY_OF_FROST, RAY_OF_SICKNESS, REGENERATE, REINCARNATE, REMOVE_CURSE, RESISTANCE, RESURRECTION, REVERSE_GRAVITY, REVIVIFY, ROPE_TRICK, SACRED_FLAME, SANCTUARY, SCORCHING_RAY, SCRYING, SEARING_SMITE, SEE_INVISIBILITY, SEEMING, SENDING, SEQUESTER, SHAPECHANGE, SHATTER, SHIELD, SHIELD_OF_FAITH, SHILLELAGH, SHOCKING_GRASP, SILENCE, SILENT_IMAGE, SIMULACRUM, SLEEP, SLEET_STORM, SLOW, SPARE_THE_DYING, SPEAK_WITH_ANIMALS, SPEAK_WITH_DEAD, SPEAK_WITH_PLANTS, SPIDER_CLIMB, SPIKE_GROWTH, SPIRIT_GUARDIANS, SPIRITUAL_WEAPON, STAGGERING_SMITE, STINKING_CLOUD, STONE_SHAPE, STONESKIN, STORM_OF_VENGEANCE, SUGGESTION, SUNBEAM, SUNBURST, SWIFT_QUIVER, SYMBOL, TASHAS_HIDEOUS_LAUGHTER, TELEKINESIS, TELEPATHY, TELEPORT, TELEPORTATION_CIRCLE, TENSERS_FLOATING_DISK, THAUMATURGY, THORN_WHIP, THUNDEROUS_SMITE, THUNDERWAVE, TIME_STOP, TONGUES, TRANSPORT_VIA_PLANTS, TREE_STRIDE, TRUE_POLYMORPH, TRUE_RESURRECTION, TRUE_SEEING, TRUE_STRIKE, TSUNAMI, UNSEEN_SERVANT, VAMPIRIC_TOUCH, VICIOUS_MOCKERY, WALL_OF_FIRE, WALL_OF_FORCE, WALL_OF_ICE, WALL_OF_STONE, WALL_OF_THORNS, WARDING_BOND, WATER_BREATHING, WATER_WALK, WEB, WEIRD, WIND_WALK, WIND_WALL, WISH, WITCH_BOLT, WORD_OF_RECALL, WRATHFUL_SMITE, ZONE_OF_TRUTH;

	public enum School {
		ABJURATION, CONJURATION, DIVINATION, ENCHANTMENT, EVOCATION, ILLUSION, NECROMANCY, TRANSMUTATION
	}

	public enum Mode {
		MELEE_ATTACK, RANGED_ATTACK, SPELL_ATTACK, SPELL_SAVE, NERF, BUFF
	}

	public static class Prototype {
		private Spell name;
		private int level;
		private School school;

		public Prototype(Spell name, int level, School school) {
			this.name = name;
			this.level = level;
			this.school = school;
		}
	}

	public static class Instance {
		private Prototype prototype;
		private int dice, faces, bonus;
		private Mode mode;
		private boolean attackSpell;
		private boolean attackRider;

		public Instance(Prototype prototype, int... is) {
			this(prototype, Mode.SPELL_SAVE, is);
		}

		public Instance(Prototype prototype, Mode mode, int... is) {
			this.prototype = prototype;
			this.mode = mode;

			if (mode.equals(Mode.SPELL_ATTACK))
				this.attackSpell = true;
			else
				this.attackSpell = false;

			if (mode.equals(Mode.MELEE_ATTACK) || mode.equals(Mode.RANGED_ATTACK))
				this.attackRider = true;
			else
				this.attackRider = false;

			this.bonus = 0;
			if (is.length > 2)
				this.bonus = is[2];

			this.dice = 0;
			if (is.length > 1)
				this.dice = is[0];

			this.faces = 0;
			if (is.length > 0)
				this.faces = is[1];
		}

		public boolean combatSpell() {
			return dice > 0 || faces > 0;
		}

		public boolean nonCombatSpell() {
			return (dice > 0 && faces > 0) != true;
		}

		public int getAverageDamage() {
			return ((faces + 1) * dice / 2) + bonus;
		}

		public String getDiceString() {
			String string = String.format("%s", dice + "d" + faces);

			return string += (bonus > 0) ? "+" + bonus : "";
		}
	}

	/*
	 * STATIC FIELDS
	 * 
	 */
	private static HashMap<Spell, Prototype> prototypeMap;
	private static HashMap<Spell, Instance> spellMap;

	// used by ELDRITCH_KNIGHT fighter and ARCANE_TRICKSTER rogue
	private static final int[][] FIGHTER_SLOTS = { { 0, 0, 0, 0 }, { 0, 0, 0, 0 }, { 2, 0, 0, 0 }, { 3, 0, 0, 0 },
			{ 3, 0, 0, 0 }, { 3, 0, 0, 0 }, { 4, 2, 0, 0 }, { 4, 2, 0, 0 }, { 4, 2, 0, 0 }, { 4, 3, 0, 0 },
			{ 4, 3, 0, 0 }, { 4, 3, 0, 0 }, { 4, 3, 2, 0 }, { 4, 3, 2, 0 }, { 4, 3, 2, 0 }, { 4, 3, 3, 0 },
			{ 4, 3, 3, 0 }, { 4, 3, 3, 0 }, { 4, 3, 3, 1 }, { 4, 3, 3, 1 } };

	// used by paladin and ranger
	private static final int[][] PALADIN_SLOTS = { { 0, 0, 0, 0, 0 }, { 2, 0, 0, 0, 0 }, { 3, 0, 0, 0, 0 },
			{ 3, 0, 0, 0, 0 }, { 4, 2, 0, 0, 0 }, { 4, 2, 0, 0, 0 }, { 4, 3, 0, 0, 0 }, { 4, 3, 0, 0, 0 },
			{ 4, 3, 2, 0, 0 }, { 4, 3, 2, 0, 0 }, { 4, 3, 3, 0, 0 }, { 4, 3, 3, 0, 0 }, { 4, 3, 3, 1, 0 },
			{ 4, 3, 3, 1, 0 }, { 4, 3, 3, 2, 0 }, { 4, 3, 3, 2, 0 }, { 4, 3, 3, 3, 1 }, { 4, 3, 3, 3, 1 },
			{ 4, 3, 3, 3, 2 }, { 4, 3, 3, 3, 2 } };

	// used exclusively by warlock
	private static final int[][] WARLOCK_SLOTS = { { 1, 0, 0, 0, 0 }, { 2, 0, 0, 0, 0 }, { 0, 2, 0, 0, 0 },
			{ 0, 2, 0, 0, 0 }, { 0, 0, 2, 0, 0 }, { 0, 0, 2, 0, 0 }, { 0, 0, 0, 2, 0 }, { 0, 0, 0, 2, 0 },
			{ 0, 0, 0, 0, 2 }, { 0, 0, 0, 0, 2 }, { 0, 0, 0, 0, 3 }, { 0, 0, 0, 0, 3 }, { 0, 0, 0, 0, 3 },
			{ 0, 0, 0, 0, 3 }, { 0, 0, 0, 0, 3 }, { 0, 0, 0, 0, 3 }, { 0, 0, 0, 0, 4 }, { 0, 0, 0, 0, 4 },
			{ 0, 0, 0, 0, 4 }, { 0, 0, 0, 0, 4 } };

	// used by bard, cleric, druid, sorcerer, and wizard
	private static int[][] WIZARD_SLOTS = { { 2, 0, 0, 0, 0, 0, 0, 0, 0 }, { 3, 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 4, 2, 0, 0, 0, 0, 0, 0, 0 }, { 4, 3, 0, 0, 0, 0, 0, 0, 0 }, { 4, 3, 2, 0, 0, 0, 0, 0, 0 },
			{ 4, 3, 3, 0, 0, 0, 0, 0, 0 }, { 4, 3, 3, 1, 0, 0, 0, 0, 0 }, { 4, 3, 3, 2, 0, 0, 0, 0, 0 },
			{ 4, 3, 3, 3, 1, 0, 0, 0, 0 }, { 4, 3, 3, 3, 2, 0, 0, 0, 0 }, { 4, 3, 3, 3, 2, 1, 0, 0, 0 },
			{ 4, 3, 3, 3, 2, 1, 0, 0, 0 }, { 4, 3, 3, 3, 2, 1, 1, 0, 0 }, { 4, 3, 3, 3, 2, 1, 1, 0, 0 },
			{ 4, 3, 3, 3, 2, 1, 1, 1, 0 }, { 4, 3, 3, 3, 2, 1, 1, 1, 0 }, { 4, 3, 3, 3, 2, 1, 1, 1, 1 },
			{ 4, 3, 3, 3, 3, 1, 1, 1, 1 }, { 4, 3, 3, 3, 3, 2, 1, 1, 1 }, { 4, 3, 3, 3, 3, 2, 2, 1, 1 } };

	/*
	 * CLASS SPELL LISTS
	 * 
	 */
	private static final Spell[][] BARD_SPELLS = {
			{ BLADE_WARD, DANCING_LIGHTS, FRIENDS, LIGHT, MAGE_HAND, MENDING, MESSAGE, MINOR_ILLUSION, PRESTIDIGITATION,
					TRUE_STRIKE, VICIOUS_MOCKERY },
			{ ANIMAL_FRIENDSHIP, BANE, CHARM_PERSON, COMPREHEND_LANGUAGES, CURE_WOUNDS, DETECT_MAGIC, DISGUISE_SELF,
					DISSONANT_WHISPERS, FAERIE_FIRE, FEATHER_FALL, HEALING_WORD, HEROISM, IDENTIFY, ILLUSORY_SCRIPT,
					LONGSTRIDER, SILENT_IMAGE, SLEEP, SPEAK_WITH_ANIMALS, TASHAS_HIDEOUS_LAUGHTER, THUNDERWAVE,
					UNSEEN_SERVANT },
			{ ANIMAL_MESSENGER, BLINDNESS_DEAFNESS, CALM_EMOTIONS, CLOUD_OF_DAGGERS, CROWN_OF_MADNESS, DETECT_THOUGHTS,
					ENHANCE_ABILITY, ENTHRALL, HEAT_METAL, HOLD_PERSON, INVISIBILITY, KNOCK, LESSER_RESTORATION,
					LOCATE_ANIMALS_OR_PLANTS, LOCATE_OBJECT, MAGIC_MOUTH, PHANTASMAL_FORCE, SEE_INVISIBILITY, SHATTER,
					SILENCE, SUGGESTION, ZONE_OF_TRUTH },
			{ BESTOW_CURSE, CLAIRVOYANCE, DISPEL_MAGIC, FEAR, FEIGN_DEATH, GLYPH_OF_WARDING, HYPNOTIC_PATTERN,
					LEOMUNDS_TINY_HUT, MAJOR_IMAGE, NONDETECTION, PLANT_GROWTH, SENDING, SPEAK_WITH_DEAD,
					SPEAK_WITH_PLANTS, STINKING_CLOUD, TONGUES },
			{ COMPULSION, CONFUSION, DIMENSION_DOOR, FREEDOM_OF_MOVEMENT, GREATER_INVISIBILITY, HALLUCINATORY_TERRAIN,
					LOCATE_CREATURE, POLYMORPH },
			{ ANIMATE_OBJECTS, AWAKEN, DOMINATE_PERSON, DREAM, GEAS, GREATER_RESTORATION, HOLD_MONSTER, LEGEND_LORE,
					MASS_CURE_WOUNDS, MISLEAD, MODIFY_MEMORY, PLANAR_BINDING, RAISE_DEAD, SCRYING, SEEMING,
					TELEPORTATION_CIRCLE },
			{ EYEBITE, FIND_THE_PATH, GUARDS_AND_WARDS, MASS_SUGGESTION, OTTOS_IRRESISTIBLE_DANCE, PROGRAMMED_ILLUSION,
					TRUE_SEEING },
			{ ETHEREALNESS, FORCECAGE, MIRAGE_ARCANA, MORDENKAINENS_MAGNIFICENT_MANSION, MORDENKAINENS_SWORD,
					PROJECT_IMAGE, REGENERATE, RESURRECTION, SYMBOL, TELEPORT },
			{ DOMINATE_MONSTER, FEEBLEMIND, GLIBNESS, MIND_BLANK, POWER_WORD_STUN },
			{ FORESIGHT, POWER_WORD_HEAL, POWER_WORD_KILL, TRUE_POLYMORPH } };

	private static final Spell[][] CLERIC_SPELLS = {
			{ GUIDANCE, LIGHT, MENDING, RESISTANCE, SACRED_FLAME, SPARE_THE_DYING, THAUMATURGY },
			{ BANE, BLESS, COMMAND, CREATE_OR_DESTROY_WATER, CURE_WOUNDS, DETECT_EVIL_AND_GOOD, DETECT_MAGIC,
					DETECT_POISON_AND_DISEASE, GUIDING_BOLT, HEALING_WORD, INFLICT_WOUNDS,
					PROTECTION_FROM_EVIL_AND_GOOD, PURIFY_FOOD_AND_DRINK, SANCTUARY, SHIELD_OF_FAITH },
			{ AUGURY, BLINDNESS_DEAFNESS, CALM_EMOTIONS, CONTINUAL_FLAME, ENHANCE_ABILITY, HOLD_PERSON,
					LESSER_RESTORATION, LOCATE_OBJECT, PRAYER_OF_HEALING, PROTECTION_FROM_POISON, SILENCE,
					SPIRITUAL_WEAPON, WARDING_BOND, ZONE_OF_TRUTH },
			{ ANIMATE_DEAD, BEACON_OF_HOPE, BESTOW_CURSE, CLAIRVOYANCE, CREATE_FOOD_AND_WATER, DAYLIGHT, DISPEL_MAGIC,
					FEIGN_DEATH, GLYPH_OF_WARDING, MAGIC_CIRCLE, MASS_HEALING_WORD, MELD_INTO_STONE,
					PROTECTION_FROM_ENERGY, REMOVE_CURSE, REVIVIFY, SENDING, SPEAK_WITH_DEAD, SPIRIT_GUARDIANS, TONGUES,
					WATER_WALK },
			{ BANISHMENT, CONTROL_WATER, DEATH_WARD, DIVINATION, FREEDOM_OF_MOVEMENT, GUARDIAN_OF_FAITH,
					LOCATE_CREATURE, STONE_SHAPE },
			{ COMMUNE, CONTAGION, DISPEL_EVIL_AND_GOOD, FLAME_STRIKE, GEAS, GREATER_RESTORATION, HALLOW, INSECT_PLAGUE,
					LEGEND_LORE, MASS_CURE_WOUNDS, PLANAR_BINDING, RAISE_DEAD, SCRYING },
			{ BLADE_BARRIER, CREATE_UNDEAD, FIND_THE_PATH, FORBIDDANCE, HARM, HEAL, HEROES_FEAST, PLANAR_ALLY,
					TRUE_SEEING, WORD_OF_RECALL },
			{ CONJURE_CELESTIAL, DIVINE_WORD, ETHEREALNESS, FIRE_STORM, PLANE_SHIFT, REGENERATE, RESURRECTION, SYMBOL },
			{ ANTIMAGIC_FIELD, CONTROL_WEATHER, EARTHQUAKE, HOLY_AURA },
			{ ASTRAL_PROJECTION, GATE, MASS_HEAL, TRUE_RESURRECTION } };

	private static final Spell[][] DRUID_SPELLS = {
			{ DRUIDCRAFT, GUIDANCE, MENDING, POISON_SPRAY, PRODUCE_FLAME, RESISTANCE, SHILLELAGH, THORN_WHIP },
			{ ANIMAL_FRIENDSHIP, CHARM_PERSON, CREATE_OR_DESTROY_WATER, CURE_WOUNDS, DETECT_MAGIC,
					DETECT_POISON_AND_DISEASE, ENTANGLE, FAERIE_FIRE, FOG_CLOUD, GOODBERRY, HEALING_WORD, JUMP,
					LONGSTRIDER, PURIFY_FOOD_AND_DRINK, SPEAK_WITH_ANIMALS, THUNDERWAVE },
			{ ANIMAL_MESSENGER, BARKSKIN, BEAST_SENSE, DARKVISION, ENHANCE_ABILITY, FIND_TRAPS, FLAME_BLADE,
					FLAMING_SPHERE, GUST_OF_WIND, HEAT_METAL, HOLD_PERSON, LESSER_RESTORATION, LOCATE_ANIMALS_OR_PLANTS,
					LOCATE_OBJECT, MOONBEAM, PASS_WITHOUT_TRACE, PROTECTION_FROM_POISON, SPIKE_GROWTH },
			{ CALL_LIGHTNING, CONJURE_ANIMALS, DAYLIGHT, DISPEL_MAGIC, FEIGN_DEATH, MELD_INTO_STONE, PLANT_GROWTH,
					PROTECTION_FROM_ENERGY, SLEET_STORM, SPEAK_WITH_PLANTS, WATER_BREATHING, WATER_WALK, WIND_WALL },
			{ BLIGHT, CONFUSION, CONJURE_MINOR_ELEMENTALS, CONJURE_WOODLAND_BEINGS, CONTROL_WATER, DOMINATE_BEAST,
					FREEDOM_OF_MOVEMENT, GIANT_INSECT, GRASPING_VINE, HALLUCINATORY_TERRAIN, ICE_STORM, LOCATE_CREATURE,
					POLYMORPH, STONE_SHAPE, STONESKIN, WALL_OF_FIRE },
			{ ANTILIFE_SHELL, AWAKEN, COMMUNE_WITH_NATURE, CONJURE_ELEMENTAL, CONTAGION, GEAS, GREATER_RESTORATION,
					INSECT_PLAGUE, MASS_CURE_WOUNDS, PLANAR_BINDING, REINCARNATE, SCRYING, TREE_STRIDE, WALL_OF_STONE },
			{ CONJURE_FEY, FIND_THE_PATH, HEAL, HEROES_FEAST, MOVE_EARTH, SUNBEAM, TRANSPORT_VIA_PLANTS, WALL_OF_THORNS,
					WIND_WALK },
			{ FIRE_STORM, MIRAGE_ARCANA, PLANE_SHIFT, REGENERATE, REVERSE_GRAVITY },
			{ ANIMAL_SHAPES, ANTIPATHY_SYMPATHY, CONTROL_WEATHER, EARTHQUAKE, FEEBLEMIND, SUNBURST, TSUNAMI },
			{ FORESIGHT, SHAPECHANGE, STORM_OF_VENGEANCE, TRUE_RESURRECTION } };

	private static Spell[][] PALADIN_SPELLS = { {},
			{ BLESS, COMMAND, COMPELLED_DUEL, CURE_WOUNDS, DETECT_EVIL_AND_GOOD, DETECT_MAGIC,
					DETECT_POISON_AND_DISEASE, DIVINE_FAVOR, HEROISM, PROTECTION_FROM_EVIL_AND_GOOD,
					PURIFY_FOOD_AND_DRINK, SEARING_SMITE, SHIELD_OF_FAITH, THUNDEROUS_SMITE, WRATHFUL_SMITE },
			{ AID, BRANDING_SMITE, FIND_STEED, LESSER_RESTORATION, LOCATE_OBJECT, MAGIC_WEAPON, PROTECTION_FROM_POISON,
					ZONE_OF_TRUTH },
			{ AURA_OF_VITALITY, BLINDING_SMITE, CREATE_FOOD_AND_WATER, CRUSADERS_MANTLE, DAYLIGHT, DISPEL_MAGIC,
					ELEMENTAL_WEAPON, MAGIC_CIRCLE, REMOVE_CURSE, REVIVIFY },
			{ AURA_OF_LIFE, AURA_OF_PURITY, BANISHMENT, DEATH_WARD, LOCATE_CREATURE, STAGGERING_SMITE },
			{ BANISHING_SMITE, CIRCLE_OF_POWER, DESTRUCTIVE_WAVE, DISPEL_EVIL_AND_GOOD, GEAS, RAISE_DEAD } };

	private static Spell[][] RANGER_SPELLS = { {},
			{ ALARM, ANIMAL_FRIENDSHIP, CURE_WOUNDS, DETECT_MAGIC, DETECT_POISON_AND_DISEASE, ENSNARING_STRIKE,
					FOG_CLOUD, GOODBERRY, HAIL_OF_THORNS, HUNTERS_MARK, JUMP, LONGSTRIDER, SPEAK_WITH_ANIMALS },
			{ ANIMAL_MESSENGER, BARKSKIN, BEAST_SENSE, CORDON_OF_ARROWS, DARKVISION, FIND_TRAPS, LESSER_RESTORATION,
					LOCATE_ANIMALS_OR_PLANTS, LOCATE_OBJECT, PASS_WITHOUT_TRACE, PROTECTION_FROM_POISON, SILENCE,
					SPIKE_GROWTH },
			{ CONJURE_ANIMALS, CONJURE_BARRAGE, DAYLIGHT, LIGHTNING_ARROW, NONDETECTION, PLANT_GROWTH,
					PROTECTION_FROM_ENERGY, SPEAK_WITH_PLANTS, WATER_BREATHING, WATER_WALK, WIND_WALL },
			{ CONJURE_WOODLAND_BEINGS, FREEDOM_OF_MOVEMENT, GRASPING_VINE, LOCATE_CREATURE, STONESKIN },
			{ COMMUNE_WITH_NATURE, CONJURE_VOLLEY, SWIFT_QUIVER, TREE_STRIDE } };

	private static Spell[][] SORCERER_SPELLS = {
			{ ACID_SPLASH, BLADE_WARD, CHILL_TOUCH, DANCING_LIGHTS, FIREBOLT, FRIENDS, LIGHT, MAGE_HAND, MENDING,
					MESSAGE, MINOR_ILLUSION, POISON_SPRAY, PRESTIDIGITATION, RAY_OF_FROST, SHOCKING_GRASP,
					TRUE_STRIKE },
			{ BURNING_HANDS, CHARM_PERSON, CHROMATIC_ORB, COLOR_SPRAY, COMPREHEND_LANGUAGES, DETECT_MAGIC,
					DISGUISE_SELF, EXPEDITIOUS_RETREAT, FALSE_LIFE, FEATHER_FALL, FOG_CLOUD, JUMP, MAGE_ARMOR,
					MAGIC_MISSILE, RAY_OF_SICKNESS, SHIELD, SILENT_IMAGE, SLEEP, THUNDERWAVE, WITCH_BOLT },
			{ ALTER_SELF, BLINDNESS_DEAFNESS, BLUR, CLOUD_OF_DAGGERS, CROWN_OF_MADNESS, DARKNESS, DARKVISION,
					DETECT_THOUGHTS, ENHANCE_ABILITY, ENLARGE_REDUCE, GUST_OF_WIND, HOLD_PERSON, INVISIBILITY, KNOCK,
					LEVITATE, MIRROR_IMAGE, MISTY_STEP, PHANTASMAL_FORCE, SCORCHING_RAY, SEE_INVISIBILITY, SHATTER,
					SPIDER_CLIMB, SUGGESTION, WEB },
			{ BLINK, CLAIRVOYANCE, COUNTERSPELL, DAYLIGHT, DISPEL_MAGIC, FEAR, FIREBALL, FLY, GASEOUS_FORM, HASTE,
					HYPNOTIC_PATTERN, LIGHTNING_BOLT, MAJOR_IMAGE, PROTECTION_FROM_ENERGY, SLEET_STORM, SLOW,
					STINKING_CLOUD, TONGUES, WATER_BREATHING, WATER_WALK },
			{ BANISHMENT, BLIGHT, CONFUSION, DIMENSION_DOOR, DOMINATE_BEAST, GREATER_INVISIBILITY, ICE_STORM, POLYMORPH,
					STONESKIN, WALL_OF_FIRE },
			{ ANIMATE_OBJECTS, CLOUDKILL, CONE_OF_COLD, CREATION, DOMINATE_PERSON, HOLD_MONSTER, INSECT_PLAGUE, SEEMING,
					TELEKINESIS, TELEPORTATION_CIRCLE, WALL_OF_STONE },
			{ ARCANE_GATE, CHAIN_LIGHTNING, CIRCLE_OF_DEATH, DISINTEGRATE, EYEBITE, GLOBE_OF_INVULNERABILITY,
					MASS_SUGGESTION, MOVE_EARTH, SUNBEAM, TRUE_SEEING },
			{ DELAYED_BLAST_FIREBALL, ETHEREALNESS, FINGER_OF_DEATH, FIRE_STORM, PLANE_SHIFT, PRISMATIC_SPRAY,
					REVERSE_GRAVITY, TELEPORT },
			{ DOMINATE_MONSTER, EARTHQUAKE, INCENDIARY_CLOUD, POWER_WORD_STUN, SUNBURST },
			{ GATE, METEOR_SWARM, POWER_WORD_KILL, TIME_STOP, WISH } };

	private static Spell[][] WARLOCK_SPELLS = {
			{ BLADE_WARD, CHILL_TOUCH, ELDRITCH_BLAST, FRIENDS, MAGE_HAND, MINOR_ILLUSION, POISON_SPRAY,
					PRESTIDIGITATION, TRUE_STRIKE },
			{ ARMOR_OF_AGATHYS, ARMS_OF_HADAR, CHARM_PERSON, COMPREHEND_LANGUAGES, EXPEDITIOUS_RETREAT, HELLISH_REBUKE,
					HEX, ILLUSORY_SCRIPT, PROTECTION_FROM_EVIL_AND_GOOD, UNSEEN_SERVANT, WITCH_BOLT },
			{ CLOUD_OF_DAGGERS, CROWN_OF_MADNESS, DARKNESS, ENTHRALL, HOLD_PERSON, INVISIBILITY, MIRROR_IMAGE,
					MISTY_STEP, RAY_OF_ENFEEBLEMENT, SHATTER, SPIDER_CLIMB, SUGGESTION },
			{ COUNTERSPELL, DISPEL_MAGIC, FEAR, FLY, GASEOUS_FORM, HUNGER_OF_HADAR, HYPNOTIC_PATTERN, MAGIC_CIRCLE,
					MAJOR_IMAGE, REMOVE_CURSE, TONGUES, VAMPIRIC_TOUCH },
			{ BANISHMENT, BLIGHT, DIMENSION_DOOR, HALLUCINATORY_TERRAIN },
			{ CONTACT_OTHER_PLANE, DREAM, HOLD_MONSTER, SCRYING },
			{ ARCANE_GATE, CIRCLE_OF_DEATH, CONJURE_FEY, CREATE_UNDEAD, EYEBITE, FLESH_TO_STONE, MASS_SUGGESTION,
					TRUE_SEEING },
			{ ETHEREALNESS, FINGER_OF_DEATH, FORCECAGE, PLANE_SHIFT },
			{ DEMIPLANE, DOMINATE_MONSTER, FEEBLEMIND, GLIBNESS, POWER_WORD_STUN },
			{ ASTRAL_PROJECTION, FORESIGHT, IMPRISONMENT, POWER_WORD_KILL, TRUE_POLYMORPH } };

	private static Spell[][] WIZARD_SPELLS = {
			{ ACID_SPLASH, BLADE_WARD, CHILL_TOUCH, DANCING_LIGHTS, FIREBOLT, FRIENDS, LIGHT, MAGE_HAND, MENDING,
					MESSAGE, MINOR_ILLUSION, POISON_SPRAY, PRESTIDIGITATION, RAY_OF_FROST, SHOCKING_GRASP,
					TRUE_STRIKE },
			{ ALARM, BURNING_HANDS, CHARM_PERSON, CHROMATIC_ORB, COLOR_SPRAY, COMPREHEND_LANGUAGES, DETECT_MAGIC,
					DISGUISE_SELF, EXPEDITIOUS_RETREAT, FALSE_LIFE, FEATHER_FALL, FIND_FAMILIAR, FOG_CLOUD, GREASE,
					IDENTIFY, ILLUSORY_SCRIPT, JUMP, LONGSTRIDER, MAGE_ARMOR, MAGIC_MISSILE,
					PROTECTION_FROM_EVIL_AND_GOOD, RAY_OF_SICKNESS, SHIELD, SILENT_IMAGE, SLEEP,
					TASHAS_HIDEOUS_LAUGHTER, TENSERS_FLOATING_DISK, THUNDERWAVE, UNSEEN_SERVANT, WITCH_BOLT },
			{ ALTER_SELF, ARCANE_LOCK, BLINDNESS_DEAFNESS, BLUR, CLOUD_OF_DAGGERS, CONTINUAL_FLAME, CROWN_OF_MADNESS,
					DARKVISION, DETECT_THOUGHTS, ENLARGE_REDUCE, FLAMING_SPHERE, GENTLE_REPOSE, GUST_OF_WIND,
					HOLD_PERSON, INVISIBILITY, KNOCK, LEVITATE, LOCATE_OBJECT, MAGIC_MOUTH, MAGIC_WEAPON,
					MELFS_ACID_ARROW, MIRROR_IMAGE, MISTY_STEP, NYSTULS_MAGIC_AURA, PHANTASMAL_FORCE,
					RAY_OF_ENFEEBLEMENT, ROPE_TRICK, SCORCHING_RAY, SEE_INVISIBILITY, SHATTER, SPIDER_CLIMB, SUGGESTION,
					WEB },
			{ ANIMATE_DEAD, BESTOW_CURSE, BLINK, CLAIRVOYANCE, COUNTERSPELL, DISPEL_MAGIC, FEAR, FEIGN_DEATH, FIREBALL,
					FLY, GASEOUS_FORM, GLYPH_OF_WARDING, HASTE, HYPNOTIC_PATTERN, LEOMUNDS_TINY_HUT, LIGHTNING_BOLT,
					MAGIC_CIRCLE, MAJOR_IMAGE, NONDETECTION, PHANTOM_STEED, PROTECTION_FROM_ENERGY, REMOVE_CURSE,
					SENDING, SLEET_STORM, SLOW, STINKING_CLOUD, TONGUES, VAMPIRIC_TOUCH, WATER_BREATHING },
			{ ARCANE_EYE, BANISHMENT, BLIGHT, CONFUSION, CONJURE_MINOR_ELEMENTALS, CONTROL_WATER, DIMENSION_DOOR,
					EVARDS_BLACK_TENTACLES, FABRICATE, FIRE_SHIELD, GREATER_INVISIBILITY, HALLUCINATORY_TERRAIN,
					ICE_STORM, LEOMUNDS_SECRET_CHEST, LOCATE_CREATURE, MORDENKAINENS_FAITHFUL_HOUND,
					MORDENKAINENS_PRIVATE_SANCTUM, OTILUKES_RESILIENT_SPHERE, PHANTASMAL_KILLER, POLYMORPH, STONE_SHAPE,
					STONESKIN, WALL_OF_FIRE },
			{ ANIMATE_OBJECTS, BIGBYS_HAND, CLOUDKILL, CONE_OF_COLD, CONJURE_ELEMENTAL, CONTACT_OTHER_PLANE, CREATION,
					DOMINATE_PERSON, DREAM, GEAS, HOLD_MONSTER, LEGEND_LORE, MISLEAD, MODIFY_MEMORY, PASSWALL,
					PLANAR_BINDING, RARYS_TELEPATHIC_BOND, SCRYING, TELEKINESIS, TELEPORTATION_CIRCLE, WALL_OF_FORCE,
					WALL_OF_STONE },
			{ ARCANE_GATE, CHAIN_LIGHTNING, CIRCLE_OF_DEATH, CONTINGENCY, CREATE_UNDEAD, DISINTEGRATE,
					DRAWMIJS_INSTANT_SUMMONS, EYEBITE, FLESH_TO_STONE, GLOBE_OF_INVULNERABILITY, GUARDS_AND_WARDS,
					MAGIC_JAR, MASS_SUGGESTION, MOVE_EARTH, OTILUKES_FREEZING_SPHERE, OTTOS_IRRESISTIBLE_DANCE,
					PROGRAMMED_ILLUSION, SUNBEAM, TRUE_SEEING, WALL_OF_ICE },
			{ DELAYED_BLAST_FIREBALL, ETHEREALNESS, FINGER_OF_DEATH, FORCECAGE, MIRAGE_ARCANA,
					MORDENKAINENS_MAGNIFICENT_MANSION, MORDENKAINENS_SWORD, PLANE_SHIFT, PRISMATIC_SPRAY, PROJECT_IMAGE,
					REVERSE_GRAVITY, SEQUESTER, SIMULACRUM, SYMBOL, TELEPORT },
			{ ANTIMAGIC_FIELD, ANTIPATHY_SYMPATHY, CLONE, CONTROL_WEATHER, DEMIPLANE, DOMINATE_MONSTER, FEEBLEMIND,
					INCENDIARY_CLOUD, MAZE, MIND_BLANK, POWER_WORD_STUN, SUNBURST, TELEPATHY },
			{ ASTRAL_PROJECTION, FORESIGHT, GATE, IMPRISONMENT, METEOR_SWARM, POWER_WORD_KILL, PRISMATIC_WALL,
					SHAPECHANGE, TIME_STOP, TRUE_POLYMORPH, WEIRD, WISH } };

	/*
	 * CLERIC DOMAINS
	 * 
	 */
	private static Spell[][] KNOWLEDGE_DOMAIN = { {}, { COMMAND, IDENTIFY }, { AUGURY, SUGGESTION },
			{ NONDETECTION, SPEAK_WITH_DEAD }, { ARCANE_EYE, CONFUSION }, { LEGEND_LORE, SCRYING } };
	private static Spell[][] LIFE_DOMAIN = { {}, { BLESS, CURE_WOUNDS }, { LESSER_RESTORATION, SPIRITUAL_WEAPON },
			{ BEACON_OF_HOPE, REVIVIFY }, { DEATH_WARD, GUARDIAN_OF_FAITH }, { MASS_CURE_WOUNDS, RAISE_DEAD } };
	private static Spell[][] LIGHT_DOMAIN = { {}, { BURNING_HANDS, FAERIE_FIRE }, { FLAMING_SPHERE, SCORCHING_RAY },
			{ DAYLIGHT, FIREBALL }, { GUARDIAN_OF_FAITH, WALL_OF_FIRE }, { FLAME_STRIKE, SCRYING } };
	private static Spell[][] NATURE_DOMAIN = { {}, { ANIMAL_FRIENDSHIP, SPEAK_WITH_ANIMALS },
			{ BARKSKIN, SPIKE_GROWTH }, { PLANT_GROWTH, WIND_WALL }, { DOMINATE_BEAST, GRASPING_VINE },
			{ INSECT_PLAGUE, TREE_STRIDE } };
	private static Spell[][] TEMPEST_DOMAIN = { {}, { FOG_CLOUD, THUNDERWAVE }, { GUST_OF_WIND, SHATTER },
			{ CALL_LIGHTNING, SLEET_STORM }, { CONTROL_WATER, ICE_STORM }, { DESTRUCTIVE_WAVE, INSECT_PLAGUE } };
	private static Spell[][] TRICKERY_DOMAIN = { {}, { CHARM_PERSON, DISGUISE_SELF },
			{ MIRROR_IMAGE, PASS_WITHOUT_TRACE }, { BLINK, DISPEL_MAGIC }, { DIMENSION_DOOR, POLYMORPH },
			{ DOMINATE_PERSON, MODIFY_MEMORY } };
	private static Spell[][] WAR_DOMAIN = { {}, { DIVINE_FAVOR, SHIELD_OF_FAITH }, { MAGIC_WEAPON, SPIRITUAL_WEAPON },
			{ CRUSADERS_MANTLE, SPIRIT_GUARDIANS }, { FREEDOM_OF_MOVEMENT, STONESKIN },
			{ FLAME_STRIKE, HOLD_MONSTER } };

	/*
	 * DRUID CIRCLES
	 * 
	 */
	private static Spell[][] ARCTIC_CIRCLE = { {}, { HOLD_PERSON, SPIKE_GROWTH }, { SLEET_STORM, SLOW },
			{ FREEDOM_OF_MOVEMENT, ICE_STORM }, { COMMUNE_WITH_NATURE, CONE_OF_COLD } };
	private static Spell[][] COAST_CIRCLE = { {}, { MIRROR_IMAGE, MISTY_STEP }, { WATER_BREATHING, WATER_WALK },
			{ CONTROL_WATER, FREEDOM_OF_MOVEMENT }, { CONJURE_ELEMENTAL, SCRYING } };
	private static Spell[][] DESERT_CIRCLE = { {}, { BLUR, SILENCE }, { CREATE_FOOD_AND_WATER, PROTECTION_FROM_ENERGY },
			{ BLIGHT, HALLUCINATORY_TERRAIN }, { INSECT_PLAGUE, WALL_OF_STONE } };
	private static Spell[][] FOREST_CIRCLE = { {}, { BARKSKIN, SPIDER_CLIMB }, { CALL_LIGHTNING, PLANT_GROWTH },
			{ DIVINATION, FREEDOM_OF_MOVEMENT }, { COMMUNE_WITH_NATURE, TREE_STRIDE } };
	private static Spell[][] GRASSLAND_CIRCLE = { {}, { INVISIBILITY, PASS_WITHOUT_TRACE }, { DAYLIGHT, HASTE },
			{ DIVINATION, FREEDOM_OF_MOVEMENT }, { DREAM, INSECT_PLAGUE } };
	private static Spell[][] MOUNTAIN_CIRCLE = { {}, { SPIDER_CLIMB, SPIKE_GROWTH },
			{ LIGHTNING_BOLT, MELD_INTO_STONE }, { STONE_SHAPE, STONESKIN }, { PASSWALL, WALL_OF_STONE } };
	private static Spell[][] SWAMP_CIRCLE = { {}, { DARKNESS, MELFS_ACID_ARROW }, { WATER_WALK, STINKING_CLOUD },
			{ FREEDOM_OF_MOVEMENT, LOCATE_CREATURE }, { INSECT_PLAGUE, SCRYING } };
	private static Spell[][] UNDERDARK_CIRCLE = { {}, { SPIDER_CLIMB, WEB }, { GASEOUS_FORM, STINKING_CLOUD },
			{ GREATER_INVISIBILITY, STONE_SHAPE }, { CLOUDKILL, INSECT_PLAGUE } };

	//
	private static final int[] BARD_KNOWN = { 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 16,
			16 };

	// used by ELDRITCH_KNIGHT fighter and ARCANE_TRICKSTER rogue
	private static final int[] FIGHTER_KNOWN = { 0, 0, 3, 4, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 11, 11, 12, 13 };
	private static final int[] RANGER_KNOWN = { 0, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11 };
	private static final int[] SORCERER_KNOWN = { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 13, 13, 14, 14, 15, 15, 15,
			15 };
	private static final int[] WARLOCK_KNOWN = { 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15,
			15 };

	static {
		prototypeMap = new HashMap<Spell, Prototype>();
		spellMap = new HashMap<Spell, Instance>();

		//
		prototypeMap.put(ACID_SPLASH, new Prototype(ACID_SPLASH, 0, School.CONJURATION));
		prototypeMap.put(AID, new Prototype(AID, 2, School.ABJURATION));
		prototypeMap.put(ALARM, new Prototype(ALARM, 1, School.ABJURATION));
		prototypeMap.put(ALTER_SELF, new Prototype(ALTER_SELF, 2, School.TRANSMUTATION));
		prototypeMap.put(ANIMAL_FRIENDSHIP, new Prototype(ANIMAL_FRIENDSHIP, 1, School.ENCHANTMENT));
		prototypeMap.put(ANIMAL_MESSENGER, new Prototype(ANIMAL_MESSENGER, 2, School.ENCHANTMENT));
		prototypeMap.put(ANIMAL_SHAPES, new Prototype(ANIMAL_SHAPES, 8, School.TRANSMUTATION));
		prototypeMap.put(ANIMATE_DEAD, new Prototype(ANIMATE_DEAD, 3, School.NECROMANCY));
		prototypeMap.put(ANIMATE_OBJECTS, new Prototype(ANIMATE_OBJECTS, 5, School.TRANSMUTATION));
		prototypeMap.put(ANTILIFE_SHELL, new Prototype(ANTILIFE_SHELL, 5, School.ABJURATION));
		prototypeMap.put(ANTIMAGIC_FIELD, new Prototype(ANTIMAGIC_FIELD, 8, School.ABJURATION));
		prototypeMap.put(ANTIPATHY_SYMPATHY, new Prototype(ANTIPATHY_SYMPATHY, 8, School.ENCHANTMENT));
		prototypeMap.put(ARCANE_EYE, new Prototype(ARCANE_EYE, 4, School.DIVINATION));
		prototypeMap.put(ARCANE_GATE, new Prototype(ARCANE_GATE, 6, School.CONJURATION));
		prototypeMap.put(ARCANE_LOCK, new Prototype(ARCANE_LOCK, 2, School.ABJURATION));
		prototypeMap.put(ARMOR_OF_AGATHYS, new Prototype(ARMOR_OF_AGATHYS, 1, School.ABJURATION));
		prototypeMap.put(ARMS_OF_HADAR, new Prototype(ARMS_OF_HADAR, 1, School.CONJURATION));
		prototypeMap.put(ASTRAL_PROJECTION, new Prototype(ASTRAL_PROJECTION, 9, School.NECROMANCY));
		prototypeMap.put(AUGURY, new Prototype(AUGURY, 2, School.DIVINATION));
		prototypeMap.put(AURA_OF_LIFE, new Prototype(AURA_OF_LIFE, 4, School.ABJURATION));
		prototypeMap.put(AURA_OF_PURITY, new Prototype(AURA_OF_PURITY, 4, School.ABJURATION));
		prototypeMap.put(AURA_OF_VITALITY, new Prototype(AURA_OF_VITALITY, 3, School.EVOCATION));
		prototypeMap.put(AWAKEN, new Prototype(AWAKEN, 5, School.TRANSMUTATION));
		prototypeMap.put(BANE, new Prototype(BANE, 1, School.ENCHANTMENT));
		prototypeMap.put(BANISHING_SMITE, new Prototype(BANISHING_SMITE, 5, School.ABJURATION));
		prototypeMap.put(BANISHMENT, new Prototype(BANISHMENT, 4, School.ABJURATION));
		prototypeMap.put(BARKSKIN, new Prototype(BARKSKIN, 2, School.TRANSMUTATION));
		prototypeMap.put(BEACON_OF_HOPE, new Prototype(BEACON_OF_HOPE, 3, School.ABJURATION));
		prototypeMap.put(BEAST_SENSE, new Prototype(BEAST_SENSE, 2, School.DIVINATION));
		prototypeMap.put(BESTOW_CURSE, new Prototype(BESTOW_CURSE, 3, School.NECROMANCY));
		prototypeMap.put(BIGBYS_HAND, new Prototype(BIGBYS_HAND, 5, School.EVOCATION));
		prototypeMap.put(BLADE_BARRIER, new Prototype(BLADE_BARRIER, 6, School.EVOCATION));
		prototypeMap.put(BLADE_WARD, new Prototype(BLADE_WARD, 0, School.ABJURATION));
		prototypeMap.put(BLESS, new Prototype(BLESS, 1, School.ENCHANTMENT));
		prototypeMap.put(BLIGHT, new Prototype(BLIGHT, 4, School.NECROMANCY));
		prototypeMap.put(BLINDING_SMITE, new Prototype(BLINDING_SMITE, 3, School.EVOCATION));
		prototypeMap.put(BLINDNESS_DEAFNESS, new Prototype(BLINDNESS_DEAFNESS, 2, School.NECROMANCY));
		prototypeMap.put(BLINK, new Prototype(BLINK, 3, School.TRANSMUTATION));
		prototypeMap.put(BLUR, new Prototype(BLUR, 2, School.ILLUSION));
		prototypeMap.put(BRANDING_SMITE, new Prototype(BRANDING_SMITE, 2, School.EVOCATION));
		prototypeMap.put(BURNING_HANDS, new Prototype(BURNING_HANDS, 1, School.EVOCATION));
		prototypeMap.put(CALL_LIGHTNING, new Prototype(CALL_LIGHTNING, 3, School.CONJURATION));
		prototypeMap.put(CALM_EMOTIONS, new Prototype(CALM_EMOTIONS, 2, School.ENCHANTMENT));
		prototypeMap.put(CHAIN_LIGHTNING, new Prototype(CHAIN_LIGHTNING, 6, School.EVOCATION));
		prototypeMap.put(CHARM_PERSON, new Prototype(CHARM_PERSON, 1, School.ENCHANTMENT));
		prototypeMap.put(CHILL_TOUCH, new Prototype(CHILL_TOUCH, 0, School.NECROMANCY));
		prototypeMap.put(CHROMATIC_ORB, new Prototype(CHROMATIC_ORB, 1, School.EVOCATION));
		prototypeMap.put(CIRCLE_OF_DEATH, new Prototype(CIRCLE_OF_DEATH, 6, School.NECROMANCY));
		prototypeMap.put(CIRCLE_OF_POWER, new Prototype(CIRCLE_OF_POWER, 5, School.ABJURATION));
		prototypeMap.put(CLAIRVOYANCE, new Prototype(CLAIRVOYANCE, 3, School.DIVINATION));
		prototypeMap.put(CLONE, new Prototype(CLONE, 8, School.NECROMANCY));
		prototypeMap.put(CLOUD_OF_DAGGERS, new Prototype(CLOUD_OF_DAGGERS, 2, School.CONJURATION));
		prototypeMap.put(CLOUDKILL, new Prototype(CLOUDKILL, 5, School.CONJURATION));
		prototypeMap.put(COLOR_SPRAY, new Prototype(COLOR_SPRAY, 1, School.ILLUSION));
		prototypeMap.put(COMMAND, new Prototype(COMMAND, 1, School.ENCHANTMENT));
		prototypeMap.put(COMMUNE, new Prototype(COMMUNE, 5, School.DIVINATION));
		prototypeMap.put(COMMUNE_WITH_NATURE, new Prototype(COMMUNE_WITH_NATURE, 5, School.DIVINATION));
		prototypeMap.put(COMPELLED_DUEL, new Prototype(COMPELLED_DUEL, 1, School.ENCHANTMENT));
		prototypeMap.put(COMPREHEND_LANGUAGES, new Prototype(COMPREHEND_LANGUAGES, 1, School.DIVINATION));
		prototypeMap.put(COMPULSION, new Prototype(COMPULSION, 4, School.ENCHANTMENT));
		prototypeMap.put(CONE_OF_COLD, new Prototype(CONE_OF_COLD, 5, School.EVOCATION));
		prototypeMap.put(CONFUSION, new Prototype(CONFUSION, 4, School.ENCHANTMENT));
		prototypeMap.put(CONJURE_ANIMALS, new Prototype(CONJURE_ANIMALS, 3, School.CONJURATION));
		prototypeMap.put(CONJURE_BARRAGE, new Prototype(CONJURE_BARRAGE, 3, School.CONJURATION));
		prototypeMap.put(CONJURE_CELESTIAL, new Prototype(CONJURE_CELESTIAL, 7, School.CONJURATION));
		prototypeMap.put(CONJURE_ELEMENTAL, new Prototype(CONJURE_ELEMENTAL, 5, School.CONJURATION));
		prototypeMap.put(CONJURE_FEY, new Prototype(CONJURE_FEY, 6, School.CONJURATION));
		prototypeMap.put(CONJURE_MINOR_ELEMENTALS, new Prototype(CONJURE_MINOR_ELEMENTALS, 4, School.CONJURATION));
		prototypeMap.put(CONJURE_VOLLEY, new Prototype(CONJURE_VOLLEY, 5, School.CONJURATION));
		prototypeMap.put(CONJURE_WOODLAND_BEINGS, new Prototype(CONJURE_WOODLAND_BEINGS, 4, School.CONJURATION));
		prototypeMap.put(CONTACT_OTHER_PLANE, new Prototype(CONTACT_OTHER_PLANE, 5, School.DIVINATION));
		prototypeMap.put(CONTAGION, new Prototype(CONTAGION, 5, School.NECROMANCY));
		prototypeMap.put(CONTINGENCY, new Prototype(CONTINGENCY, 6, School.EVOCATION));
		prototypeMap.put(CONTINUAL_FLAME, new Prototype(CONTINUAL_FLAME, 2, School.EVOCATION));
		prototypeMap.put(CONTROL_WATER, new Prototype(CONTROL_WATER, 4, School.TRANSMUTATION));
		prototypeMap.put(CONTROL_WEATHER, new Prototype(CONTROL_WEATHER, 8, School.TRANSMUTATION));
		prototypeMap.put(CORDON_OF_ARROWS, new Prototype(CORDON_OF_ARROWS, 2, School.TRANSMUTATION));
		prototypeMap.put(COUNTERSPELL, new Prototype(COUNTERSPELL, 3, School.ABJURATION));
		prototypeMap.put(CREATE_FOOD_AND_WATER, new Prototype(CREATE_FOOD_AND_WATER, 3, School.CONJURATION));
		prototypeMap.put(CREATE_OR_DESTROY_WATER, new Prototype(CREATE_OR_DESTROY_WATER, 1, School.TRANSMUTATION));
		prototypeMap.put(CREATE_UNDEAD, new Prototype(CREATE_UNDEAD, 6, School.NECROMANCY));
		prototypeMap.put(CREATION, new Prototype(CREATION, 5, School.ILLUSION));
		prototypeMap.put(CROWN_OF_MADNESS, new Prototype(CROWN_OF_MADNESS, 2, School.ENCHANTMENT));
		prototypeMap.put(CRUSADERS_MANTLE, new Prototype(CRUSADERS_MANTLE, 3, School.EVOCATION));
		prototypeMap.put(CURE_WOUNDS, new Prototype(CURE_WOUNDS, 1, School.EVOCATION));
		prototypeMap.put(DANCING_LIGHTS, new Prototype(DANCING_LIGHTS, 0, School.EVOCATION));
		prototypeMap.put(DARKNESS, new Prototype(DARKNESS, 2, School.EVOCATION));
		prototypeMap.put(DARKVISION, new Prototype(DARKVISION, 2, School.TRANSMUTATION));
		prototypeMap.put(DAYLIGHT, new Prototype(DAYLIGHT, 3, School.EVOCATION));
		prototypeMap.put(DEATH_WARD, new Prototype(DEATH_WARD, 4, School.ABJURATION));
		prototypeMap.put(DELAYED_BLAST_FIREBALL, new Prototype(DELAYED_BLAST_FIREBALL, 7, School.EVOCATION));
		prototypeMap.put(DEMIPLANE, new Prototype(DEMIPLANE, 8, School.CONJURATION));
		prototypeMap.put(DESTRUCTIVE_WAVE, new Prototype(DESTRUCTIVE_WAVE, 5, School.EVOCATION));
		prototypeMap.put(DETECT_EVIL_AND_GOOD, new Prototype(DETECT_EVIL_AND_GOOD, 1, School.DIVINATION));
		prototypeMap.put(DETECT_MAGIC, new Prototype(DETECT_MAGIC, 1, School.DIVINATION));
		prototypeMap.put(DETECT_POISON_AND_DISEASE, new Prototype(DETECT_POISON_AND_DISEASE, 1, School.DIVINATION));
		prototypeMap.put(DETECT_THOUGHTS, new Prototype(DETECT_THOUGHTS, 2, School.DIVINATION));
		prototypeMap.put(DIMENSION_DOOR, new Prototype(DIMENSION_DOOR, 4, School.CONJURATION));
		prototypeMap.put(DISGUISE_SELF, new Prototype(DISGUISE_SELF, 1, School.ILLUSION));
		prototypeMap.put(DISINTEGRATE, new Prototype(DISINTEGRATE, 6, School.TRANSMUTATION));
		prototypeMap.put(DISPEL_EVIL_AND_GOOD, new Prototype(DISPEL_EVIL_AND_GOOD, 5, School.ABJURATION));
		prototypeMap.put(DISPEL_MAGIC, new Prototype(DISPEL_MAGIC, 3, School.ABJURATION));
		prototypeMap.put(DISSONANT_WHISPERS, new Prototype(DISSONANT_WHISPERS, 1, School.ENCHANTMENT));
		prototypeMap.put(DIVINATION, new Prototype(DIVINATION, 4, School.DIVINATION));
		prototypeMap.put(DIVINE_FAVOR, new Prototype(DIVINE_FAVOR, 1, School.EVOCATION));
		prototypeMap.put(DIVINE_WORD, new Prototype(DIVINE_WORD, 7, School.EVOCATION));
		prototypeMap.put(DOMINATE_BEAST, new Prototype(DOMINATE_BEAST, 4, School.ENCHANTMENT));
		prototypeMap.put(DOMINATE_MONSTER, new Prototype(DOMINATE_MONSTER, 8, School.ENCHANTMENT));
		prototypeMap.put(DOMINATE_PERSON, new Prototype(DOMINATE_PERSON, 5, School.ENCHANTMENT));
		prototypeMap.put(DRAWMIJS_INSTANT_SUMMONS, new Prototype(DRAWMIJS_INSTANT_SUMMONS, 6, School.CONJURATION));
		prototypeMap.put(DREAM, new Prototype(DREAM, 5, School.ILLUSION));
		prototypeMap.put(DRUIDCRAFT, new Prototype(DRUIDCRAFT, 0, School.TRANSMUTATION));
		prototypeMap.put(EARTHQUAKE, new Prototype(EARTHQUAKE, 8, School.EVOCATION));
		prototypeMap.put(ELDRITCH_BLAST, new Prototype(ELDRITCH_BLAST, 0, School.EVOCATION));
		prototypeMap.put(ELEMENTAL_WEAPON, new Prototype(ELEMENTAL_WEAPON, 3, School.TRANSMUTATION));
		prototypeMap.put(ENHANCE_ABILITY, new Prototype(ENHANCE_ABILITY, 2, School.TRANSMUTATION));
		prototypeMap.put(ENLARGE_REDUCE, new Prototype(ENLARGE_REDUCE, 2, School.TRANSMUTATION));
		prototypeMap.put(ENSNARING_STRIKE, new Prototype(ENSNARING_STRIKE, 1, School.CONJURATION));
		prototypeMap.put(ENTANGLE, new Prototype(ENTANGLE, 1, School.CONJURATION));
		prototypeMap.put(ENTHRALL, new Prototype(ENTHRALL, 2, School.ENCHANTMENT));
		prototypeMap.put(ETHEREALNESS, new Prototype(ETHEREALNESS, 7, School.TRANSMUTATION));
		prototypeMap.put(EVARDS_BLACK_TENTACLES, new Prototype(EVARDS_BLACK_TENTACLES, 4, School.CONJURATION));
		prototypeMap.put(EXPEDITIOUS_RETREAT, new Prototype(EXPEDITIOUS_RETREAT, 1, School.TRANSMUTATION));
		prototypeMap.put(EYEBITE, new Prototype(EYEBITE, 6, School.NECROMANCY));
		prototypeMap.put(FABRICATE, new Prototype(FABRICATE, 4, School.TRANSMUTATION));
		prototypeMap.put(FAERIE_FIRE, new Prototype(FAERIE_FIRE, 1, School.EVOCATION));
		prototypeMap.put(FALSE_LIFE, new Prototype(FALSE_LIFE, 1, School.NECROMANCY));
		prototypeMap.put(FEAR, new Prototype(FEAR, 3, School.ILLUSION));
		prototypeMap.put(FEATHER_FALL, new Prototype(FEATHER_FALL, 1, School.TRANSMUTATION));
		prototypeMap.put(FEEBLEMIND, new Prototype(FEEBLEMIND, 8, School.ENCHANTMENT));
		prototypeMap.put(FEIGN_DEATH, new Prototype(FEIGN_DEATH, 3, School.NECROMANCY));
		prototypeMap.put(FIND_FAMILIAR, new Prototype(FIND_FAMILIAR, 1, School.CONJURATION));
		prototypeMap.put(FIND_STEED, new Prototype(FIND_STEED, 2, School.CONJURATION));
		prototypeMap.put(FIND_THE_PATH, new Prototype(FIND_THE_PATH, 6, School.DIVINATION));
		prototypeMap.put(FIND_TRAPS, new Prototype(FIND_TRAPS, 2, School.DIVINATION));
		prototypeMap.put(FINGER_OF_DEATH, new Prototype(FINGER_OF_DEATH, 7, School.NECROMANCY));
		prototypeMap.put(FIREBALL, new Prototype(FIREBALL, 3, School.EVOCATION));
		prototypeMap.put(FIREBOLT, new Prototype(FIREBOLT, 0, School.EVOCATION));
		prototypeMap.put(FIRE_SHIELD, new Prototype(FIRE_SHIELD, 4, School.EVOCATION));
		prototypeMap.put(FIRE_STORM, new Prototype(FIRE_STORM, 7, School.EVOCATION));
		prototypeMap.put(FLAME_BLADE, new Prototype(FLAME_BLADE, 2, School.EVOCATION));
		prototypeMap.put(FLAME_STRIKE, new Prototype(FLAME_STRIKE, 5, School.EVOCATION));
		prototypeMap.put(FLAMING_SPHERE, new Prototype(FLAMING_SPHERE, 2, School.CONJURATION));
		prototypeMap.put(FLESH_TO_STONE, new Prototype(FLESH_TO_STONE, 6, School.TRANSMUTATION));
		prototypeMap.put(FLY, new Prototype(FLY, 3, School.TRANSMUTATION));
		prototypeMap.put(FOG_CLOUD, new Prototype(FOG_CLOUD, 1, School.CONJURATION));
		prototypeMap.put(FORBIDDANCE, new Prototype(FORBIDDANCE, 6, School.ABJURATION));
		prototypeMap.put(FORCECAGE, new Prototype(FORCECAGE, 7, School.EVOCATION));
		prototypeMap.put(FORESIGHT, new Prototype(FORESIGHT, 9, School.DIVINATION));
		prototypeMap.put(FREEDOM_OF_MOVEMENT, new Prototype(FREEDOM_OF_MOVEMENT, 4, School.ABJURATION));
		prototypeMap.put(FRIENDS, new Prototype(FRIENDS, 0, School.ENCHANTMENT));
		prototypeMap.put(GASEOUS_FORM, new Prototype(GASEOUS_FORM, 3, School.TRANSMUTATION));
		prototypeMap.put(GATE, new Prototype(GATE, 9, School.CONJURATION));
		prototypeMap.put(GEAS, new Prototype(GEAS, 5, School.ENCHANTMENT));
		prototypeMap.put(GENTLE_REPOSE, new Prototype(GENTLE_REPOSE, 2, School.NECROMANCY));
		prototypeMap.put(GIANT_INSECT, new Prototype(GIANT_INSECT, 4, School.TRANSMUTATION));
		prototypeMap.put(GLIBNESS, new Prototype(GLIBNESS, 8, School.TRANSMUTATION));
		prototypeMap.put(GLOBE_OF_INVULNERABILITY, new Prototype(GLOBE_OF_INVULNERABILITY, 6, School.ABJURATION));
		prototypeMap.put(GLYPH_OF_WARDING, new Prototype(GLYPH_OF_WARDING, 3, School.ABJURATION));
		prototypeMap.put(GOODBERRY, new Prototype(GOODBERRY, 1, School.TRANSMUTATION));
		prototypeMap.put(GRASPING_VINE, new Prototype(GRASPING_VINE, 4, School.CONJURATION));
		prototypeMap.put(GREASE, new Prototype(GREASE, 1, School.CONJURATION));
		prototypeMap.put(GREATER_INVISIBILITY, new Prototype(GREATER_INVISIBILITY, 4, School.ILLUSION));
		prototypeMap.put(GREATER_RESTORATION, new Prototype(GREATER_RESTORATION, 5, School.ABJURATION));
		prototypeMap.put(GUARDIAN_OF_FAITH, new Prototype(GUARDIAN_OF_FAITH, 4, School.CONJURATION));
		prototypeMap.put(GUARDS_AND_WARDS, new Prototype(GUARDS_AND_WARDS, 6, School.ABJURATION));
		prototypeMap.put(GUIDANCE, new Prototype(GUIDANCE, 0, School.DIVINATION));
		prototypeMap.put(GUIDING_BOLT, new Prototype(GUIDING_BOLT, 1, School.EVOCATION));
		prototypeMap.put(GUST_OF_WIND, new Prototype(GUST_OF_WIND, 2, School.EVOCATION));
		prototypeMap.put(HAIL_OF_THORNS, new Prototype(HAIL_OF_THORNS, 1, School.CONJURATION));
		prototypeMap.put(HALLOW, new Prototype(HALLOW, 5, School.EVOCATION));
		prototypeMap.put(HALLUCINATORY_TERRAIN, new Prototype(HALLUCINATORY_TERRAIN, 4, School.ILLUSION));
		prototypeMap.put(HARM, new Prototype(HARM, 6, School.NECROMANCY));
		prototypeMap.put(HASTE, new Prototype(HASTE, 3, School.TRANSMUTATION));
		prototypeMap.put(HEAL, new Prototype(HEAL, 6, School.EVOCATION));
		prototypeMap.put(HEALING_WORD, new Prototype(HEALING_WORD, 1, School.EVOCATION));
		prototypeMap.put(HEAT_METAL, new Prototype(HEAT_METAL, 2, School.TRANSMUTATION));
		prototypeMap.put(HELLISH_REBUKE, new Prototype(HELLISH_REBUKE, 1, School.EVOCATION));
		prototypeMap.put(HEROES_FEAST, new Prototype(HEROES_FEAST, 6, School.CONJURATION));
		prototypeMap.put(HEROISM, new Prototype(HEROISM, 1, School.ENCHANTMENT));
		prototypeMap.put(HEX, new Prototype(HEX, 1, School.ENCHANTMENT));
		prototypeMap.put(HOLD_MONSTER, new Prototype(HOLD_MONSTER, 5, School.ENCHANTMENT));
		prototypeMap.put(HOLD_PERSON, new Prototype(HOLD_PERSON, 2, School.ENCHANTMENT));
		prototypeMap.put(HOLY_AURA, new Prototype(HOLY_AURA, 8, School.ABJURATION));
		prototypeMap.put(HUNGER_OF_HADAR, new Prototype(HUNGER_OF_HADAR, 3, School.CONJURATION));
		prototypeMap.put(HUNTERS_MARK, new Prototype(HUNTERS_MARK, 1, School.DIVINATION));
		prototypeMap.put(HYPNOTIC_PATTERN, new Prototype(HYPNOTIC_PATTERN, 3, School.ILLUSION));
		prototypeMap.put(ICE_STORM, new Prototype(ICE_STORM, 4, School.EVOCATION));
		prototypeMap.put(IDENTIFY, new Prototype(IDENTIFY, 1, School.DIVINATION));
		prototypeMap.put(ILLUSORY_SCRIPT, new Prototype(ILLUSORY_SCRIPT, 1, School.ILLUSION));
		prototypeMap.put(IMPRISONMENT, new Prototype(IMPRISONMENT, 9, School.ABJURATION));
		prototypeMap.put(INCENDIARY_CLOUD, new Prototype(INCENDIARY_CLOUD, 8, School.CONJURATION));
		prototypeMap.put(INFLICT_WOUNDS, new Prototype(INFLICT_WOUNDS, 1, School.NECROMANCY));
		prototypeMap.put(INSECT_PLAGUE, new Prototype(INSECT_PLAGUE, 5, School.CONJURATION));
		prototypeMap.put(INVISIBILITY, new Prototype(INVISIBILITY, 2, School.ILLUSION));
		prototypeMap.put(JUMP, new Prototype(JUMP, 1, School.TRANSMUTATION));
		prototypeMap.put(KNOCK, new Prototype(KNOCK, 2, School.TRANSMUTATION));
		prototypeMap.put(LEGEND_LORE, new Prototype(LEGEND_LORE, 5, School.DIVINATION));
		prototypeMap.put(LEOMUNDS_SECRET_CHEST, new Prototype(LEOMUNDS_SECRET_CHEST, 4, School.CONJURATION));
		prototypeMap.put(LEOMUNDS_TINY_HUT, new Prototype(LEOMUNDS_TINY_HUT, 3, School.EVOCATION));
		prototypeMap.put(LESSER_RESTORATION, new Prototype(LESSER_RESTORATION, 2, School.ABJURATION));
		prototypeMap.put(LEVITATE, new Prototype(LEVITATE, 2, School.TRANSMUTATION));
		prototypeMap.put(LIGHT, new Prototype(LIGHT, 0, School.EVOCATION));
		prototypeMap.put(LIGHTNING_ARROW, new Prototype(LIGHTNING_ARROW, 3, School.TRANSMUTATION));
		prototypeMap.put(LIGHTNING_BOLT, new Prototype(LIGHTNING_BOLT, 3, School.EVOCATION));
		prototypeMap.put(LOCATE_ANIMALS_OR_PLANTS, new Prototype(LOCATE_ANIMALS_OR_PLANTS, 2, School.DIVINATION));
		prototypeMap.put(LOCATE_CREATURE, new Prototype(LOCATE_CREATURE, 4, School.DIVINATION));
		prototypeMap.put(LOCATE_OBJECT, new Prototype(LOCATE_OBJECT, 2, School.DIVINATION));
		prototypeMap.put(LONGSTRIDER, new Prototype(LONGSTRIDER, 1, School.TRANSMUTATION));
		prototypeMap.put(MAGE_ARMOR, new Prototype(MAGE_ARMOR, 1, School.ABJURATION));
		prototypeMap.put(MAGE_HAND, new Prototype(MAGE_HAND, 0, School.CONJURATION));
		prototypeMap.put(MAGIC_CIRCLE, new Prototype(MAGIC_CIRCLE, 3, School.ABJURATION));
		prototypeMap.put(MAGIC_JAR, new Prototype(MAGIC_JAR, 6, School.NECROMANCY));
		prototypeMap.put(MAGIC_MISSILE, new Prototype(MAGIC_MISSILE, 1, School.EVOCATION));
		prototypeMap.put(MAGIC_MOUTH, new Prototype(MAGIC_MOUTH, 2, School.ILLUSION));
		prototypeMap.put(MAGIC_WEAPON, new Prototype(MAGIC_WEAPON, 2, School.TRANSMUTATION));
		prototypeMap.put(MAJOR_IMAGE, new Prototype(MAJOR_IMAGE, 3, School.ILLUSION));
		prototypeMap.put(MASS_CURE_WOUNDS, new Prototype(MASS_CURE_WOUNDS, 5, School.CONJURATION));
		prototypeMap.put(MASS_HEAL, new Prototype(MASS_HEAL, 9, School.CONJURATION));
		prototypeMap.put(MASS_HEALING_WORD, new Prototype(MASS_HEALING_WORD, 3, School.EVOCATION));
		prototypeMap.put(MASS_SUGGESTION, new Prototype(MASS_SUGGESTION, 6, School.ENCHANTMENT));
		prototypeMap.put(MAZE, new Prototype(MAZE, 8, School.CONJURATION));
		prototypeMap.put(MELD_INTO_STONE, new Prototype(MELD_INTO_STONE, 3, School.TRANSMUTATION));
		prototypeMap.put(MELFS_ACID_ARROW, new Prototype(MELFS_ACID_ARROW, 2, School.EVOCATION));
		prototypeMap.put(MENDING, new Prototype(MENDING, 0, School.TRANSMUTATION));
		prototypeMap.put(MESSAGE, new Prototype(MESSAGE, 0, School.TRANSMUTATION));
		prototypeMap.put(METEOR_SWARM, new Prototype(METEOR_SWARM, 9, School.EVOCATION));
		prototypeMap.put(MIND_BLANK, new Prototype(MIND_BLANK, 8, School.ABJURATION));
		prototypeMap.put(MINOR_ILLUSION, new Prototype(MINOR_ILLUSION, 0, School.ILLUSION));
		prototypeMap.put(MIRAGE_ARCANA, new Prototype(MIRAGE_ARCANA, 7, School.ILLUSION));
		prototypeMap.put(MIRROR_IMAGE, new Prototype(MIRROR_IMAGE, 2, School.ILLUSION));
		prototypeMap.put(MISLEAD, new Prototype(MISLEAD, 5, School.ILLUSION));
		prototypeMap.put(MISTY_STEP, new Prototype(MISTY_STEP, 2, School.CONJURATION));
		prototypeMap.put(MODIFY_MEMORY, new Prototype(MODIFY_MEMORY, 5, School.ENCHANTMENT));
		prototypeMap.put(MOONBEAM, new Prototype(MOONBEAM, 2, School.EVOCATION));
		prototypeMap.put(MORDENKAINENS_FAITHFUL_HOUND,
				new Prototype(MORDENKAINENS_FAITHFUL_HOUND, 4, School.CONJURATION));
		prototypeMap.put(MORDENKAINENS_MAGNIFICENT_MANSION,
				new Prototype(MORDENKAINENS_MAGNIFICENT_MANSION, 7, School.CONJURATION));
		prototypeMap.put(MORDENKAINENS_PRIVATE_SANCTUM,
				new Prototype(MORDENKAINENS_PRIVATE_SANCTUM, 4, School.ABJURATION));
		prototypeMap.put(MORDENKAINENS_SWORD, new Prototype(MORDENKAINENS_SWORD, 7, School.EVOCATION));
		prototypeMap.put(MOVE_EARTH, new Prototype(MOVE_EARTH, 6, School.TRANSMUTATION));
		prototypeMap.put(NONDETECTION, new Prototype(NONDETECTION, 3, School.ABJURATION));
		prototypeMap.put(NYSTULS_MAGIC_AURA, new Prototype(NYSTULS_MAGIC_AURA, 2, School.ILLUSION));
		prototypeMap.put(OTILUKES_FREEZING_SPHERE, new Prototype(OTILUKES_FREEZING_SPHERE, 6, School.EVOCATION));
		prototypeMap.put(OTILUKES_RESILIENT_SPHERE, new Prototype(OTILUKES_RESILIENT_SPHERE, 4, School.EVOCATION));
		prototypeMap.put(OTTOS_IRRESISTIBLE_DANCE, new Prototype(OTTOS_IRRESISTIBLE_DANCE, 6, School.ENCHANTMENT));
		prototypeMap.put(PASS_WITHOUT_TRACE, new Prototype(PASS_WITHOUT_TRACE, 2, School.ABJURATION));
		prototypeMap.put(PASSWALL, new Prototype(PASSWALL, 5, School.TRANSMUTATION));
		prototypeMap.put(PHANTASMAL_FORCE, new Prototype(PHANTASMAL_FORCE, 2, School.ILLUSION));
		prototypeMap.put(PHANTASMAL_KILLER, new Prototype(PHANTASMAL_KILLER, 4, School.ILLUSION));
		prototypeMap.put(PHANTOM_STEED, new Prototype(PHANTOM_STEED, 3, School.ILLUSION));
		prototypeMap.put(PLANAR_ALLY, new Prototype(PLANAR_ALLY, 6, School.CONJURATION));
		prototypeMap.put(PLANAR_BINDING, new Prototype(PLANAR_BINDING, 5, School.ABJURATION));
		prototypeMap.put(PLANE_SHIFT, new Prototype(PLANE_SHIFT, 7, School.CONJURATION));
		prototypeMap.put(PLANT_GROWTH, new Prototype(PLANT_GROWTH, 3, School.TRANSMUTATION));
		prototypeMap.put(POISON_SPRAY, new Prototype(POISON_SPRAY, 0, School.CONJURATION));
		prototypeMap.put(POLYMORPH, new Prototype(POLYMORPH, 4, School.TRANSMUTATION));
		prototypeMap.put(POWER_WORD_HEAL, new Prototype(POWER_WORD_HEAL, 9, School.EVOCATION));
		prototypeMap.put(POWER_WORD_KILL, new Prototype(POWER_WORD_KILL, 9, School.ENCHANTMENT));
		prototypeMap.put(POWER_WORD_STUN, new Prototype(POWER_WORD_STUN, 8, School.ENCHANTMENT));
		prototypeMap.put(PRAYER_OF_HEALING, new Prototype(PRAYER_OF_HEALING, 2, School.EVOCATION));
		prototypeMap.put(PRESTIDIGITATION, new Prototype(PRESTIDIGITATION, 0, School.TRANSMUTATION));
		prototypeMap.put(PRISMATIC_SPRAY, new Prototype(PRISMATIC_SPRAY, 7, School.EVOCATION));
		prototypeMap.put(PRISMATIC_WALL, new Prototype(PRISMATIC_WALL, 9, School.ABJURATION));
		prototypeMap.put(PRODUCE_FLAME, new Prototype(PRODUCE_FLAME, 0, School.CONJURATION));
		prototypeMap.put(PROGRAMMED_ILLUSION, new Prototype(PROGRAMMED_ILLUSION, 6, School.ILLUSION));
		prototypeMap.put(PROJECT_IMAGE, new Prototype(PROJECT_IMAGE, 7, School.ILLUSION));
		prototypeMap.put(PROTECTION_FROM_ENERGY, new Prototype(PROTECTION_FROM_ENERGY, 3, School.ABJURATION));
		prototypeMap.put(PROTECTION_FROM_EVIL_AND_GOOD,
				new Prototype(PROTECTION_FROM_EVIL_AND_GOOD, 1, School.ABJURATION));
		prototypeMap.put(PROTECTION_FROM_POISON, new Prototype(PROTECTION_FROM_POISON, 2, School.ABJURATION));
		prototypeMap.put(PURIFY_FOOD_AND_DRINK, new Prototype(PURIFY_FOOD_AND_DRINK, 1, School.TRANSMUTATION));
		prototypeMap.put(RAISE_DEAD, new Prototype(RAISE_DEAD, 5, School.NECROMANCY));
		prototypeMap.put(RARYS_TELEPATHIC_BOND, new Prototype(RARYS_TELEPATHIC_BOND, 5, School.DIVINATION));
		prototypeMap.put(RAY_OF_ENFEEBLEMENT, new Prototype(RAY_OF_ENFEEBLEMENT, 2, School.NECROMANCY));
		prototypeMap.put(RAY_OF_FROST, new Prototype(RAY_OF_FROST, 0, School.EVOCATION));
		prototypeMap.put(RAY_OF_SICKNESS, new Prototype(RAY_OF_SICKNESS, 1, School.NECROMANCY));
		prototypeMap.put(REGENERATE, new Prototype(REGENERATE, 7, School.TRANSMUTATION));
		prototypeMap.put(REINCARNATE, new Prototype(REINCARNATE, 5, School.TRANSMUTATION));
		prototypeMap.put(REMOVE_CURSE, new Prototype(REMOVE_CURSE, 3, School.ABJURATION));
		prototypeMap.put(RESISTANCE, new Prototype(RESISTANCE, 0, School.ABJURATION));
		prototypeMap.put(RESURRECTION, new Prototype(RESURRECTION, 7, School.NECROMANCY));
		prototypeMap.put(REVERSE_GRAVITY, new Prototype(REVERSE_GRAVITY, 7, School.TRANSMUTATION));
		prototypeMap.put(REVIVIFY, new Prototype(REVIVIFY, 3, School.CONJURATION));
		prototypeMap.put(ROPE_TRICK, new Prototype(ROPE_TRICK, 2, School.TRANSMUTATION));
		prototypeMap.put(SACRED_FLAME, new Prototype(SACRED_FLAME, 0, School.EVOCATION));
		prototypeMap.put(SANCTUARY, new Prototype(SANCTUARY, 1, School.ABJURATION));
		prototypeMap.put(SCORCHING_RAY, new Prototype(SCORCHING_RAY, 2, School.EVOCATION));
		prototypeMap.put(SCRYING, new Prototype(SCRYING, 5, School.DIVINATION));
		prototypeMap.put(SEARING_SMITE, new Prototype(SEARING_SMITE, 1, School.EVOCATION));
		prototypeMap.put(SEE_INVISIBILITY, new Prototype(SEE_INVISIBILITY, 2, School.DIVINATION));
		prototypeMap.put(SEEMING, new Prototype(SEEMING, 5, School.ILLUSION));
		prototypeMap.put(SENDING, new Prototype(SENDING, 3, School.EVOCATION));
		prototypeMap.put(SEQUESTER, new Prototype(SEQUESTER, 7, School.TRANSMUTATION));
		prototypeMap.put(SHAPECHANGE, new Prototype(SHAPECHANGE, 9, School.TRANSMUTATION));
		prototypeMap.put(SHATTER, new Prototype(SHATTER, 2, School.EVOCATION));
		prototypeMap.put(SHIELD, new Prototype(SHIELD, 1, School.ABJURATION));
		prototypeMap.put(SHIELD_OF_FAITH, new Prototype(SHIELD_OF_FAITH, 1, School.ABJURATION));
		prototypeMap.put(SHILLELAGH, new Prototype(SHILLELAGH, 0, School.TRANSMUTATION));
		prototypeMap.put(SHOCKING_GRASP, new Prototype(SHOCKING_GRASP, 0, School.EVOCATION));
		prototypeMap.put(SILENCE, new Prototype(SILENCE, 2, School.ILLUSION));
		prototypeMap.put(SILENT_IMAGE, new Prototype(SILENT_IMAGE, 1, School.ILLUSION));
		prototypeMap.put(SIMULACRUM, new Prototype(SIMULACRUM, 7, School.ILLUSION));
		prototypeMap.put(SLEEP, new Prototype(SLEEP, 1, School.ENCHANTMENT));
		prototypeMap.put(SLEET_STORM, new Prototype(SLEET_STORM, 3, School.CONJURATION));
		prototypeMap.put(SLOW, new Prototype(SLOW, 3, School.TRANSMUTATION));
		prototypeMap.put(SPARE_THE_DYING, new Prototype(SPARE_THE_DYING, 0, School.NECROMANCY));
		prototypeMap.put(SPEAK_WITH_ANIMALS, new Prototype(SPEAK_WITH_ANIMALS, 1, School.DIVINATION));
		prototypeMap.put(SPEAK_WITH_DEAD, new Prototype(SPEAK_WITH_DEAD, 3, School.NECROMANCY));
		prototypeMap.put(SPEAK_WITH_PLANTS, new Prototype(SPEAK_WITH_PLANTS, 3, School.TRANSMUTATION));
		prototypeMap.put(SPIDER_CLIMB, new Prototype(SPIDER_CLIMB, 2, School.TRANSMUTATION));
		prototypeMap.put(SPIKE_GROWTH, new Prototype(SPIKE_GROWTH, 2, School.TRANSMUTATION));
		prototypeMap.put(SPIRIT_GUARDIANS, new Prototype(SPIRIT_GUARDIANS, 3, School.CONJURATION));
		prototypeMap.put(SPIRITUAL_WEAPON, new Prototype(SPIRITUAL_WEAPON, 2, School.EVOCATION));
		prototypeMap.put(STAGGERING_SMITE, new Prototype(STAGGERING_SMITE, 4, School.EVOCATION));
		prototypeMap.put(STINKING_CLOUD, new Prototype(STINKING_CLOUD, 3, School.CONJURATION));
		prototypeMap.put(STONE_SHAPE, new Prototype(STONE_SHAPE, 4, School.TRANSMUTATION));
		prototypeMap.put(STONESKIN, new Prototype(STONESKIN, 4, School.ABJURATION));
		prototypeMap.put(STORM_OF_VENGEANCE, new Prototype(STORM_OF_VENGEANCE, 9, School.CONJURATION));
		prototypeMap.put(SUGGESTION, new Prototype(SUGGESTION, 2, School.ENCHANTMENT));
		prototypeMap.put(SUNBEAM, new Prototype(SUNBEAM, 6, School.EVOCATION));
		prototypeMap.put(SUNBURST, new Prototype(SUNBURST, 8, School.EVOCATION));
		prototypeMap.put(SWIFT_QUIVER, new Prototype(SWIFT_QUIVER, 5, School.TRANSMUTATION));
		prototypeMap.put(SYMBOL, new Prototype(SYMBOL, 7, School.ABJURATION));
		prototypeMap.put(TASHAS_HIDEOUS_LAUGHTER, new Prototype(TASHAS_HIDEOUS_LAUGHTER, 1, School.ENCHANTMENT));
		prototypeMap.put(TELEKINESIS, new Prototype(TELEKINESIS, 5, School.TRANSMUTATION));
		prototypeMap.put(TELEPATHY, new Prototype(TELEPATHY, 8, School.EVOCATION));
		prototypeMap.put(TELEPORT, new Prototype(TELEPORT, 7, School.CONJURATION));
		prototypeMap.put(TELEPORTATION_CIRCLE, new Prototype(TELEPORTATION_CIRCLE, 5, School.CONJURATION));
		prototypeMap.put(TENSERS_FLOATING_DISK, new Prototype(TENSERS_FLOATING_DISK, 1, School.CONJURATION));
		prototypeMap.put(THAUMATURGY, new Prototype(THAUMATURGY, 0, School.TRANSMUTATION));
		prototypeMap.put(THORN_WHIP, new Prototype(THORN_WHIP, 0, School.TRANSMUTATION));
		prototypeMap.put(THUNDEROUS_SMITE, new Prototype(THUNDEROUS_SMITE, 1, School.EVOCATION));
		prototypeMap.put(THUNDERWAVE, new Prototype(THUNDERWAVE, 1, School.EVOCATION));
		prototypeMap.put(TIME_STOP, new Prototype(TIME_STOP, 9, School.TRANSMUTATION));
		prototypeMap.put(TONGUES, new Prototype(TONGUES, 3, School.DIVINATION));
		prototypeMap.put(TRANSPORT_VIA_PLANTS, new Prototype(TRANSPORT_VIA_PLANTS, 6, School.CONJURATION));
		prototypeMap.put(TREE_STRIDE, new Prototype(TREE_STRIDE, 5, School.CONJURATION));
		prototypeMap.put(TRUE_POLYMORPH, new Prototype(TRUE_POLYMORPH, 9, School.TRANSMUTATION));
		prototypeMap.put(TRUE_RESURRECTION, new Prototype(TRUE_RESURRECTION, 9, School.NECROMANCY));
		prototypeMap.put(TRUE_SEEING, new Prototype(TRUE_SEEING, 6, School.DIVINATION));
		prototypeMap.put(TRUE_STRIKE, new Prototype(TRUE_STRIKE, 0, School.DIVINATION));
		prototypeMap.put(TSUNAMI, new Prototype(TSUNAMI, 8, School.CONJURATION));
		prototypeMap.put(UNSEEN_SERVANT, new Prototype(UNSEEN_SERVANT, 1, School.CONJURATION));
		prototypeMap.put(VAMPIRIC_TOUCH, new Prototype(VAMPIRIC_TOUCH, 3, School.NECROMANCY));
		prototypeMap.put(VICIOUS_MOCKERY, new Prototype(VICIOUS_MOCKERY, 0, School.ENCHANTMENT));
		prototypeMap.put(WALL_OF_FIRE, new Prototype(WALL_OF_FIRE, 4, School.EVOCATION));
		prototypeMap.put(WALL_OF_FORCE, new Prototype(WALL_OF_FORCE, 5, School.EVOCATION));
		prototypeMap.put(WALL_OF_ICE, new Prototype(WALL_OF_ICE, 6, School.EVOCATION));
		prototypeMap.put(WALL_OF_STONE, new Prototype(WALL_OF_STONE, 5, School.EVOCATION));
		prototypeMap.put(WALL_OF_THORNS, new Prototype(WALL_OF_THORNS, 6, School.CONJURATION));
		prototypeMap.put(WARDING_BOND, new Prototype(WARDING_BOND, 2, School.ABJURATION));
		prototypeMap.put(WATER_BREATHING, new Prototype(WATER_BREATHING, 3, School.TRANSMUTATION));
		prototypeMap.put(WATER_WALK, new Prototype(WATER_WALK, 3, School.TRANSMUTATION));
		prototypeMap.put(WEB, new Prototype(WEB, 2, School.CONJURATION));
		prototypeMap.put(WEIRD, new Prototype(WEIRD, 9, School.ILLUSION));
		prototypeMap.put(WIND_WALK, new Prototype(WIND_WALK, 6, School.TRANSMUTATION));
		prototypeMap.put(WIND_WALL, new Prototype(WIND_WALL, 3, School.EVOCATION));
		prototypeMap.put(WISH, new Prototype(WISH, 9, School.CONJURATION));
		prototypeMap.put(WITCH_BOLT, new Prototype(WITCH_BOLT, 1, School.EVOCATION));
		prototypeMap.put(WORD_OF_RECALL, new Prototype(WORD_OF_RECALL, 6, School.CONJURATION));
		prototypeMap.put(WRATHFUL_SMITE, new Prototype(WRATHFUL_SMITE, 1, School.EVOCATION));
		prototypeMap.put(ZONE_OF_TRUTH, new Prototype(ZONE_OF_TRUTH, 2, School.ENCHANTMENT));

		//
		spellMap.put(ACID_SPLASH, new Instance(prototypeMap.get(ACID_SPLASH), 1, 6));
		spellMap.put(ARMS_OF_HADAR, new Instance(prototypeMap.get(ARMS_OF_HADAR), 2, 6));
		spellMap.put(BANISHING_SMITE, new Instance(prototypeMap.get(BANISHING_SMITE), Mode.MELEE_ATTACK, 5, 10));
		spellMap.put(BLIGHT, new Instance(prototypeMap.get(BLIGHT), 8, 8));
		spellMap.put(BLINDING_SMITE, new Instance(prototypeMap.get(BLINDING_SMITE), Mode.MELEE_ATTACK, 3, 8));
		spellMap.put(BRANDING_SMITE, new Instance(prototypeMap.get(BRANDING_SMITE), Mode.MELEE_ATTACK, 2, 6));
		spellMap.put(BURNING_HANDS, new Instance(prototypeMap.get(BURNING_HANDS), 3, 6));
		spellMap.put(CALL_LIGHTNING, new Instance(prototypeMap.get(CALL_LIGHTNING), 3, 10));
		spellMap.put(CHAIN_LIGHTNING, new Instance(prototypeMap.get(CHAIN_LIGHTNING), 10, 8));
		spellMap.put(CHILL_TOUCH, new Instance(prototypeMap.get(CHILL_TOUCH), Mode.SPELL_ATTACK, 1, 8));
		spellMap.put(CHROMATIC_ORB, new Instance(prototypeMap.get(CHROMATIC_ORB), Mode.SPELL_ATTACK, 3, 8));
		spellMap.put(CIRCLE_OF_DEATH, new Instance(prototypeMap.get(CIRCLE_OF_DEATH), 8, 6));
		spellMap.put(CLOUD_OF_DAGGERS, new Instance(prototypeMap.get(CLOUD_OF_DAGGERS), 4, 4));
		spellMap.put(CLOUDKILL, new Instance(prototypeMap.get(CLOUDKILL), 5, 8));
		spellMap.put(CONE_OF_COLD, new Instance(prototypeMap.get(CONE_OF_COLD), 8, 8));
		spellMap.put(CONJURE_BARRAGE, new Instance(prototypeMap.get(CONJURE_BARRAGE), 3, 8));
		spellMap.put(CONJURE_VOLLEY, new Instance(prototypeMap.get(CONJURE_VOLLEY), 8, 8));
		spellMap.put(DELAYED_BLAST_FIREBALL, new Instance(prototypeMap.get(DELAYED_BLAST_FIREBALL), 12, 6));
		spellMap.put(DESTRUCTIVE_WAVE, new Instance(prototypeMap.get(DESTRUCTIVE_WAVE), 5, 6));
		spellMap.put(DISINTEGRATE, new Instance(prototypeMap.get(DISINTEGRATE), 10, 6));
		spellMap.put(DISSONANT_WHISPERS, new Instance(prototypeMap.get(DISSONANT_WHISPERS), 3, 6));
		spellMap.put(ELDRITCH_BLAST, new Instance(prototypeMap.get(ELDRITCH_BLAST), 1, 10));
		spellMap.put(EVARDS_BLACK_TENTACLES, new Instance(prototypeMap.get(EVARDS_BLACK_TENTACLES), 3, 6));
		spellMap.put(FINGER_OF_DEATH, new Instance(prototypeMap.get(FINGER_OF_DEATH), 7, 8));
		spellMap.put(FIREBALL, new Instance(prototypeMap.get(FIREBALL), 8, 6));
		spellMap.put(FIREBOLT, new Instance(prototypeMap.get(FIREBOLT), Mode.SPELL_ATTACK, 1, 10));
		spellMap.put(FIRE_STORM, new Instance(prototypeMap.get(FIRE_STORM), 7, 10));
		spellMap.put(FLAME_BLADE, new Instance(prototypeMap.get(FLAME_BLADE), Mode.SPELL_ATTACK, 3, 6));
		spellMap.put(FLAME_STRIKE, new Instance(prototypeMap.get(FLAME_STRIKE), 4, 6));
		spellMap.put(FLAMING_SPHERE, new Instance(prototypeMap.get(FLAMING_SPHERE), 2, 6));
		spellMap.put(GLYPH_OF_WARDING, new Instance(prototypeMap.get(GLYPH_OF_WARDING), 5, 8));
		spellMap.put(GUIDING_BOLT, new Instance(prototypeMap.get(GUIDING_BOLT), Mode.SPELL_ATTACK, 4, 6));
		spellMap.put(HAIL_OF_THORNS, new Instance(prototypeMap.get(HAIL_OF_THORNS), Mode.RANGED_ATTACK, 1, 10));
		spellMap.put(HARM, new Instance(prototypeMap.get(HARM), 14, 6));
		spellMap.put(HEAT_METAL, new Instance(prototypeMap.get(HEAT_METAL), 2, 8));
		spellMap.put(HELLISH_REBUKE, new Instance(prototypeMap.get(HELLISH_REBUKE), 2, 10));
		spellMap.put(HUNGER_OF_HADAR, new Instance(prototypeMap.get(HUNGER_OF_HADAR), 2, 6));
		spellMap.put(ICE_STORM, new Instance(prototypeMap.get(ICE_STORM), 2, 8));
		spellMap.put(INCENDIARY_CLOUD, new Instance(prototypeMap.get(INCENDIARY_CLOUD), 10, 8));
		spellMap.put(INFLICT_WOUNDS, new Instance(prototypeMap.get(INFLICT_WOUNDS), 3, 10));
		spellMap.put(INSECT_PLAGUE, new Instance(prototypeMap.get(INSECT_PLAGUE), 4, 10));
		spellMap.put(LIGHTNING_ARROW, new Instance(prototypeMap.get(LIGHTNING_ARROW), 4, 8));
		spellMap.put(LIGHTNING_BOLT, new Instance(prototypeMap.get(LIGHTNING_BOLT), 8, 6));
		spellMap.put(MAGIC_MISSILE, new Instance(prototypeMap.get(MAGIC_MISSILE), 3, 4, 3));
		spellMap.put(MELFS_ACID_ARROW, new Instance(prototypeMap.get(MELFS_ACID_ARROW), 4, 4));
		spellMap.put(METEOR_SWARM, new Instance(prototypeMap.get(METEOR_SWARM), 40, 6));
		spellMap.put(MOONBEAM, new Instance(prototypeMap.get(MOONBEAM), 2, 10));
		spellMap.put(MORDENKAINENS_SWORD, new Instance(prototypeMap.get(MORDENKAINENS_SWORD), 3, 10));
		spellMap.put(OTILUKES_FREEZING_SPHERE, new Instance(prototypeMap.get(OTILUKES_FREEZING_SPHERE), 10, 6));
		spellMap.put(PHANTASMAL_KILLER, new Instance(prototypeMap.get(PHANTASMAL_KILLER), 4, 10));
		spellMap.put(POISON_SPRAY, new Instance(prototypeMap.get(POISON_SPRAY), 1, 12));
		spellMap.put(PRISMATIC_SPRAY, new Instance(prototypeMap.get(PRISMATIC_SPRAY), 10, 6));
		spellMap.put(PRISMATIC_WALL, new Instance(prototypeMap.get(PRISMATIC_WALL), 50, 6));
		spellMap.put(PRODUCE_FLAME, new Instance(prototypeMap.get(PRODUCE_FLAME), 1, 8));
		spellMap.put(RAY_OF_FROST, new Instance(prototypeMap.get(RAY_OF_FROST), Mode.SPELL_ATTACK, 1, 8));
		spellMap.put(RAY_OF_SICKNESS, new Instance(prototypeMap.get(RAY_OF_SICKNESS), 2, 8));
		spellMap.put(SACRED_FLAME, new Instance(prototypeMap.get(SACRED_FLAME), 1, 8));
		spellMap.put(SCORCHING_RAY, new Instance(prototypeMap.get(SCORCHING_RAY), 2, 6));
		spellMap.put(SEARING_SMITE, new Instance(prototypeMap.get(SEARING_SMITE), Mode.MELEE_ATTACK, 1, 6));
		spellMap.put(SHATTER, new Instance(prototypeMap.get(SHATTER), 3, 8));
		spellMap.put(SHILLELAGH, new Instance(prototypeMap.get(SHILLELAGH), Mode.MELEE_ATTACK, 1, 8));
		spellMap.put(SHOCKING_GRASP, new Instance(prototypeMap.get(SHOCKING_GRASP), Mode.SPELL_ATTACK, 1, 8));
		spellMap.put(SPIRITUAL_WEAPON, new Instance(prototypeMap.get(SPIRITUAL_WEAPON), Mode.SPELL_ATTACK, 1, 8));
		spellMap.put(STAGGERING_SMITE, new Instance(prototypeMap.get(STAGGERING_SMITE), Mode.MELEE_ATTACK, 4, 6));
		spellMap.put(STORM_OF_VENGEANCE, new Instance(prototypeMap.get(STORM_OF_VENGEANCE), 10, 6));
		spellMap.put(SUNBEAM, new Instance(prototypeMap.get(SUNBEAM), 6, 8));
		spellMap.put(SUNBURST, new Instance(prototypeMap.get(SUNBURST), 12, 6));
		spellMap.put(SYMBOL, new Instance(prototypeMap.get(SYMBOL), 10, 10));
		spellMap.put(THORN_WHIP, new Instance(prototypeMap.get(THORN_WHIP), Mode.SPELL_ATTACK, 1, 6));
		spellMap.put(THUNDEROUS_SMITE, new Instance(prototypeMap.get(THUNDEROUS_SMITE), Mode.MELEE_ATTACK, 2, 6));
		spellMap.put(THUNDERWAVE, new Instance(prototypeMap.get(THUNDERWAVE), 2, 8));
		spellMap.put(VAMPIRIC_TOUCH, new Instance(prototypeMap.get(VAMPIRIC_TOUCH), 3, 6));
		spellMap.put(VICIOUS_MOCKERY, new Instance(prototypeMap.get(VICIOUS_MOCKERY), 1, 4));
		spellMap.put(WALL_OF_FIRE, new Instance(prototypeMap.get(WALL_OF_FIRE), 5, 8));
		spellMap.put(WALL_OF_ICE, new Instance(prototypeMap.get(WALL_OF_ICE), 10, 6));
		spellMap.put(WALL_OF_THORNS, new Instance(prototypeMap.get(WALL_OF_THORNS), 7, 8));
		spellMap.put(WEIRD, new Instance(prototypeMap.get(WEIRD), 4, 10));
		spellMap.put(WITCH_BOLT, new Instance(prototypeMap.get(WITCH_BOLT), Mode.SPELL_ATTACK, 1, 12));
		spellMap.put(WRATHFUL_SMITE, new Instance(prototypeMap.get(WRATHFUL_SMITE), Mode.MELEE_ATTACK, 1, 6));

	}

	/*
	 * STATIC METHODS
	 * 
	 */
	private static Set<Spell> classSpellsByTier(Class job, int tier) {
		Spell[] array = null;
		Set<Spell> set = EnumSet.noneOf(Spell.class);

		if (job.equals(Class.BARD))
			array = BARD_SPELLS[tier];
		else if (job.equals(Class.CLERIC))
			array = CLERIC_SPELLS[tier];
		else if (job.equals(Class.DRUID))
			array = DRUID_SPELLS[tier];
		else if (job.equals(Class.FIGHTER) && tier <= 4)
			array = WIZARD_SPELLS[tier];
		else if (job.equals(Class.FIGHTER))
			array = WIZARD_SPELLS[4];
		else if (job.equals(Class.PALADIN) && tier <= 5)
			array = PALADIN_SPELLS[tier];
		else if (job.equals(Class.PALADIN))
			array = WIZARD_SPELLS[5];
		else if (job.equals(Class.RANGER) && tier <= 5)
			array = RANGER_SPELLS[tier];
		else if (job.equals(Class.RANGER))
			array = WIZARD_SPELLS[5];
		else if (job.equals(Class.ROGUE) && tier <= 4)
			array = WIZARD_SPELLS[tier];
		else if (job.equals(Class.ROGUE))
			array = WIZARD_SPELLS[4];
		else if (job.equals(Class.SORCERER))
			array = SORCERER_SPELLS[tier];
		else if (job.equals(Class.WARLOCK))
			array = WARLOCK_SPELLS[tier];
		else if (job.equals(Class.WIZARD))
			array = WIZARD_SPELLS[tier];

		if (array != null) {
			for (Spell el : array)
				set.add(el);

		}

		return set;
	}

	public static Spell spellFromSchool(int tier, Class job, School school) {
		Set<Spell> set = classSpellsByTier(job, tier);

		return Dice.randomFromSet(set);
	}

	public static void spellFromSchoolOrElse(int toAdd, int tier, School school, Player actor) {
		Class job = actor.getJob();
		EnumSet<Spell> spellsKnown;

		if (actor.getSpellsKnown() != null)
			spellsKnown = actor.getSpellsKnown();
		else
			spellsKnown = EnumSet.noneOf(Spell.class);

		Set<Spell> set = classSpellsByTier(job, tier);
		Spell.retainSpellsOfSchool(school, set);

		int added = 0;

		Spell candidate;
		while (added < toAdd && set.size() > 0) {
			candidate = Dice.randomFromSet(set);

			if (spellsKnown.add(candidate))
				++added;
		}

		if (added < toAdd)
			set = classSpellsByTier(job, tier);

		while (added < toAdd) {
			candidate = Dice.randomFromSet(set);

			if (spellsKnown.add(candidate))
				++added;
		}

		// final step
		actor.setSpellsKnown(spellsKnown);
	}

	public static void addEldritchKnightSpells(int toAdd, int tier, Player actor) {
		Class job = actor.getJob();
		EnumSet<Spell> spellsKnown;

		if (actor.getSpellsKnown() != null)
			spellsKnown = actor.getSpellsKnown();
		else
			spellsKnown = EnumSet.noneOf(Spell.class);

		Set<Spell> set = classSpellsByTier(job, tier);
		Spell.retainSpellsOfSchools(School.ABJURATION, School.EVOCATION, set);

		int added = 0;

		Spell candidate;
		while (added < toAdd && set.size() > 0) {
			candidate = Dice.randomFromSet(set);

			if (spellsKnown.add(candidate))
				++added;
		}

		if (added < toAdd)
			set = classSpellsByTier(job, tier);

		while (added < toAdd) {
			candidate = Dice.randomFromSet(set);

			if (spellsKnown.add(candidate))
				++added;
		}

		// final step
		actor.setSpellsKnown(spellsKnown);
	}

	public static void addArcaneTricksterSpells(int toAdd, int tier, Player actor) {
		Class job = actor.getJob();
		EnumSet<Spell> spellsKnown;

		if (actor.getSpellsKnown() != null)
			spellsKnown = actor.getSpellsKnown();
		else
			spellsKnown = EnumSet.noneOf(Spell.class);

		Set<Spell> set = classSpellsByTier(job, tier);
		Spell.retainSpellsOfSchools(School.ENCHANTMENT, School.ILLUSION, set);

		int added = 0;

		Spell candidate;
		while (added < toAdd && set.size() > 0) {
			candidate = Dice.randomFromSet(set);

			if (spellsKnown.add(candidate))
				++added;
		}

		if (added < toAdd)
			set = classSpellsByTier(job, tier);

		while (added < toAdd) {
			candidate = Dice.randomFromSet(set);

			if (spellsKnown.add(candidate))
				++added;
		}

		// final step
		actor.setSpellsKnown(spellsKnown);
	}

	public static Set<Spell> allSpellsOfSchool(int tier, School school) {
		Set<Spell> spells = EnumSet.noneOf(Spell.class);

		Spell candidate;
		Prototype prototype;
		for (Iterator<Spell> it = prototypeMap.keySet().iterator(); it.hasNext();) {
			candidate = it.next();
			prototype = prototypeMap.get(candidate);
			if (prototype.level == tier && prototype.school.equals(school))
				spells.add(candidate);
		}

		return spells;
	}

	private static EnumSet<Spell> spellSelector(int toAdd, int tier, Class job, EnumSet<Spell> spellsKnown) {
		Set<Spell> spellPool = classSpellsByTier(job, tier);
		if (tier > 3) {
			// 3&4 or 4&5 or 5&6
			spellPool.addAll(classSpellsByTier(job, tier - 1));
		} else if (tier > 6) {
			// 6&7 or 7&8 or 8&9
			spellPool.addAll(classSpellsByTier(job, tier - 1));
			spellPool.addAll(classSpellsByTier(job, tier - 2));

		}

		spellsKnown.addAll(Dice.randomAddToSet(toAdd, spellPool, spellsKnown));
		return spellsKnown;
	}

	public static void setupSpellsKnown(Player actor) {
		EnumSet<Spell> spellsKnown;
		if (actor.getSpellsKnown() == null)
			spellsKnown = EnumSet.noneOf(Spell.class);
		else
			spellsKnown = actor.getSpellsKnown();

		Class job = actor.getJob();
		Subclass archetype = actor.getArchetype();
		if (job.equals(Class.BARD)) {
			spellSelector(2, 0, job, spellsKnown);
			spellSelector(4, 1, job, spellsKnown);

		} else if (job.equals(Class.CLERIC)) {
			spellSelector(3, 0, job, spellsKnown);

		} else if (job.equals(Class.DRUID)) {
			spellSelector(2, 0, job, spellsKnown);

			// } else if (archetype.equals(Class.Subclass.ELDRITCH_KNIGHT)) {
			// spellSelector(0, 0, job, spellsKnown);

			// } else if (job.equals(Class.PALADIN)) {
			// spellSelector(0, 0, job, spellsKnown);

			// } else if (job.equals(Class.RANGER)) {
			// spellSelector(0, 0, job, spellsKnown);

			// } else if (archetype.equals(Class.Subclass.ARCANE_TRICKSTER)) {
			// spellSelector(0, 0, job, spellsKnown);

		} else if (job.equals(Class.SORCERER)) {
			spellSelector(4, 0, job, spellsKnown);
			spellSelector(2, 1, job, spellsKnown);

		} else if (job.equals(Class.WARLOCK)) {
			spellSelector(2, 0, job, spellsKnown);
			spellSelector(2, 1, job, spellsKnown);

		} else if (job.equals(Class.WIZARD)) {
			spellSelector(3, 0, job, spellsKnown);
			// TODO - need special thing for wizard
			spellSelector(6, 1, job, spellsKnown);

		}

		actor.setSpellsKnown(spellsKnown);
	}

	public static Set<Spell> retainSpellsOfSchool(School school, Set<Spell> spells) {
		Set<Spell> set = EnumSet.noneOf(Spell.class);

		Spell candidate;
		for (Iterator<Spell> it = spells.iterator(); it.hasNext();) {
			candidate = it.next();
			if (prototypeMap.get(candidate).school.equals(school))
				set.add(candidate);
		}

		return set;
	}

	public static Set<Spell> retainSpellsOfSchools(School school1, School school2, Set<Spell> spells) {
		Set<Spell> set = EnumSet.noneOf(Spell.class);

		Spell candidate;
		for (Iterator<Spell> it = spells.iterator(); it.hasNext();) {
			candidate = it.next();

			if (prototypeMap.get(candidate).school.equals(school1)
					|| prototypeMap.get(candidate).school.equals(school2)) {
				set.add(candidate);

			}
		}

		return set;
	}

	public static Set<Spell> retainSpellsOfTier(int tier, Set<Spell> spells) {
		Set<Spell> set = EnumSet.noneOf(Spell.class);

		Spell candidate;
		for (Iterator<Spell> it = spells.iterator(); it.hasNext();) {
			candidate = it.next();
			if (prototypeMap.get(candidate).level == tier)
				set.add(candidate);
		}

		return set;
	}

	public static Set<Spell> retainSpellsOfTiers(int tier1, int tier2, Set<Spell> spells) {
		Set<Spell> set = EnumSet.noneOf(Spell.class);

		Spell candidate;
		for (Iterator<Spell> it = spells.iterator(); it.hasNext();) {
			candidate = it.next();

			if (prototypeMap.get(candidate).level == tier1 || prototypeMap.get(candidate).level == tier2)
				set.add(candidate);
		}

		return set;
	}

	public static Set<Spell> retainSpellsExceptOfTier(int tier, Set<Spell> spells) {
		Set<Spell> set = EnumSet.noneOf(Spell.class);

		Spell candidate;
		for (Iterator<Spell> it = spells.iterator(); it.hasNext();) {
			candidate = it.next();
			if (prototypeMap.get(candidate).level != tier)
				set.add(candidate);
		}

		return set;
	}

	public static void addCantripKnown(Class job, EnumSet<Spell> spellsKnown) {
		spellSelector(1, 0, job, spellsKnown);
	}

	public static void addToSpellsKnown(int tier, Class job, EnumSet<Spell> spellsKnown) {
		spellSelector(1, tier, job, spellsKnown);
	}

	public static void addToSpellsKnown(int toAdd, int tier, Class job, EnumSet<Spell> spellsKnown) {
		spellSelector(toAdd, tier, job, spellsKnown);
	}

	public static void addMagicalSecret(int tier, Player actor) {
		EnumSet<Spell> spellsKnown = actor.getSpellsKnown();

		Class job = actor.getJob();
		if (job.equals(Class.BARD)) {
			// TODO - paladin, ranger, sorcerer, and warlock spells should be possible but
			// I'm lazy
			Class[] jobs = { Class.CLERIC, Class.DRUID, Class.WIZARD };

			job = Dice.randomFromArray(jobs);
			// TODO - testing
			// System.out.println("Choosing secret from " + job.toString());
			spellSelector(1, tier, job, spellsKnown);
		}

		actor.setSpellsKnown(spellsKnown);
	}

	/*
	 * 
	 */
	public static boolean isCombatSpell(Spell spell) {
		boolean combatSpell = false;

		if (spellMap.get(spell) != null && spellMap.get(spell).combatSpell())
			combatSpell = true;

		return combatSpell;
	}

	public static Spell highestDamagingSpell(Set<Spell> spellsKnown) {
		Set<Spell> filteredSet;
		Spell candidate, highestDamage = null;
		int currentDamage, previousDamage = 0;

		for (int i = 9; i >= 0; --i) {
			filteredSet = EnumSet.copyOf(spellsKnown);
			retainSpellsOfTier(i, filteredSet);

			for (Iterator<Spell> it = filteredSet.iterator(); it.hasNext();) {
				candidate = it.next();
				if (spellMap.get(candidate) != null)
					currentDamage = spellMap.get(candidate).getAverageDamage();
				else
					currentDamage = 0;

				if (currentDamage > 0 && currentDamage > previousDamage) {
					previousDamage = currentDamage;
					highestDamage = candidate;
				}
			}

			if (highestDamage != null)
				break;
		}

		return highestDamage;
	}

	public static int spellTier(Spell spell) {
		return prototypeMap.get(spell).level;
	}

	public static boolean cantrip(Spell spell) {
		return (prototypeMap.get(spell).level == 0);
	}

	public static Set<Spell> getAllSpells(Class job) {
		Set<Spell> spells = EnumSet.noneOf(Spell.class);

		for (int i = 9; i >= 0; --i) {
			spells.addAll(classSpellsByTier(job, i));
		}

		return spells;
	}

	public static int getAverageDamage(Spell spell) {
		int averageDamage = 0;
		if (spellMap.get(spell) != null)
			averageDamage = spellMap.get(spell).getAverageDamage();

		return averageDamage;
	}

	public static String getDiceString(Spell spell) {
		Instance instance = spellMap.get(spell);
		String string = (instance != null) ? instance.getDiceString() : "0";

		return string;
	}

	public static Spell wizardUtilityCantrip() {
		Spell[] array = { BLADE_WARD, DANCING_LIGHTS, FRIENDS, LIGHT, MAGE_HAND, MENDING, MESSAGE, MINOR_ILLUSION,
				PRESTIDIGITATION, TRUE_STRIKE };
		int dice = Dice.roll(array.length) - 1;

		return array[dice];
	}

	public static HashSet<Spell> randomWizardSpellbook(int bookLevel) {
		HashSet<Spell> spellbook = new HashSet<Spell>();
		Spell candidate;
		int spellLevel;

		if (bookLevel > 20)
			bookLevel = 20;

		Spell[] array;
		for (int i = 1; i <= bookLevel; ++i) {
			spellLevel = ((i - 1) / 2 + 1 > 9) ? 9 : ((i - 1) / 2 + 1 < 1) ? 1 : (i - 1) / 2 + 1;
			array = WIZARD_SPELLS[spellLevel];

			for (int j = 0; j < ((i == 1) ? 6 : 2); ++j) {
				candidate = array[Dice.roll(array.length) - 1];
				while (spellbook.contains(candidate)) {
					candidate = array[Dice.roll(array.length) - 1];
				}
				spellbook.add(candidate);
			}

		}

		return spellbook;
	}

}
